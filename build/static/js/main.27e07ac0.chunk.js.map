{"version":3,"sources":["theme/GlobalStyles.js","theme/typography.js","theme/index.js","layouts/MainLayout/NavBar/NavItem.js","layouts/MainLayout/NavBar/index.js","layouts/MainLayout/TopBar.js","layouts/MainLayout/index.js","layouts/Page.js","views/Errors/NotFoundView.js","views/GridEditor/EditorMap/EditorBrush.js","redux/actions.js","views/GridEditor/EditorMap/EditorMap.js","views/GridEditor/EditorMenu/TypesEditor/index.js","views/GridEditor/EditorMenu/GridProps/GridMaker/gridCreator.js","views/GridEditor/EditorMenu/GridProps/GridMaker/index.js","views/GridEditor/EditorMenu/GridProps/CommitGrid/index.js","views/GridEditor/EditorMenu/GridProps/CenterMapButton/CenterMapButton.js","views/GridEditor/EditorMenu/GridProps/index.js","views/GridEditor/EditorMenu/index.js","views/GridEditor/index.js","views/CityScopeJS/CityIO/utils.js","views/CityScopeJS/CityIO/cityIO.js","views/CityIOviewer/CityIOdeckGLmap/legoio.png","views/CityIOviewer/CityIOdeckGLmap/SelectedTable/index.js","views/CityIOviewer/CityIOdeckGLmap/index.js","views/CityIOviewer/CityIOlist.js","views/CityIOviewer/SplashScreen/GetGITdate.js","views/CityIOviewer/SplashScreen/index.js","views/CityIOviewer/index.js","redux/initialState.js","views/CityScopeJS/CityIO/LoadingSpinner/index.js","redux/reducer.js","redux/store.js","utils/utils.js","views/CityScopeJS/MenuContainer/EditMenu/TypeInfo.js","views/CityScopeJS/MenuContainer/EditMenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/ABMLegend.js","views/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/styles.js","views/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/AccessSubmenu/index.js","views/CityScopeJS/MenuContainer/TogglesMenu/index.js","views/CityScopeJS/MenuContainer/ChooseScenario/index.js","views/CityScopeJS/MenuContainer/index.js","views/CityScopeJS/DeckglMap/components/PaintBrush/PaintBrush.js","views/CityScopeJS/DeckglMap/components/CellMeta.js","views/CityScopeJS/DeckglMap/components/PaintBrush/index.js","views/CityScopeJS/DeckglMap/components/AnimationComponent.js","views/CityScopeJS/DeckglMap/deckglLayers/AccessLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/AggregatedTripsLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/ABMLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GridLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/TextualLayer.js","views/CityScopeJS/DeckglMap/deckglLayers/GeojsonLayer.js","views/CityScopeJS/DeckglMap/index.js","views/CityScopeJS/VisContainer/Radar/index.js","views/CityScopeJS/VisContainer/BarChart/index.js","views/CityScopeJS/VisContainer/AreaCalc/index.js","views/CityScopeJS/VisContainer/index.js","views/CityScopeJS/CSjsMain.js","views/CityScopeJS/index.js","views/ProjectionMapping/CityIO/index.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/AccessLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/AggregatedTripsLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/ABMLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/deckglLayers/GridLayer.js","views/ProjectionMapping/Keystone/PrjDeckGLMap/index.js","views/ProjectionMapping/Keystone/Components/util.ts","views/ProjectionMapping/Keystone/Components/anchor.tsx","views/ProjectionMapping/Keystone/Components/Keystoner.tsx","views/ProjectionMapping/Keystone/Components/deleteLocalStorage.js","views/ProjectionMapping/Keystone/index.js","Components/TableNameInput.js","views/ProjectionMapping/UIWebsocket/index.js","views/ProjectionMapping/index.js","views/CityScopeJS/VisContainer/index_custom.js","views/CityScopeJS/CSjsMainCustom.js","views/CityScopeJS/indexMapCenter.js","views/CityScopeJS/indexChartSidebar.js","views/CityScopeJS/indexOptionsMenu.js","routes.js","App.js","redux/Provider.js","index.js"],"names":["useStyles","makeStyles","createStyles","boxSizing","margin","padding","html","height","width","body","backgroundColor","a","textDecoration","GlobalStyles","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","h1","fontWeight","letterSpacing","h2","h3","h4","h5","h6","overline","theme","createMuiTheme","zIndex","appBar","palette","background","default","paper","dark","primary","main","light","secondary","text","colors","grey","shape","borderRadius","overrides","MuiListItem","root","boxShadow","button","MuiOutlinedInput","notchedOutline","borderColor","MuiAppBar","colorPrimary","color","MuiDivider","opacity","MuiCard","MuiButton","item","display","paddingTop","paddingBottom","justifyContent","textTransform","icon","marginRight","spacing","title","active","fontWeightBold","NavItem","className","href","Icon","rest","classes","ListItem","clsx","disableGutters","Button","activeClassName","component","RouterLink","to","size","items","MapIcon","BarChartIcon","FormatShapesIcon","mobileDrawer","top","NavBar","openNavDrawer","onMobileNavOpen","content","Box","flexDirection","p","List","map","style","onClick","flexGrow","Card","elevation","CardContent","position","Fab","Typography","align","variant","Date","getFullYear","Drawer","anchor","open","defaultProps","onMobileClose","TopBar","AppBar","Toolbar","IconButton","name","overflow","flex","MainLayout","useState","navMenuState","setNavMenuState","Page","forwardRef","ref","children","Helmet","image","marginTop","maxWidth","NotFoundView","Container","SelectionTarget","props","mousePos","selectedType","divSize","colorTrans","mouseX","clientX","mouseY","clientY","border","mouseDown","pointerEvents","left","GET_CITYIO_DATA","getCityioData","data","type","LISTEN_TO_MAP_EVENTS","LISTEN_TO_ABM_SLIDERS","listenToSlidersEvents","LISTEN_TO_ABM_MODE","LISTEN_TO_ACCESS_TOGGLE","MENU_INTERACTION","listenToMenuUI","LISTEN_TO_EDIT_MENU","listenToEditMenu","SET_READY_STATE","setReadyState","SET_LOADING_STATE","setLoadingState","SET_SCENARIO_NAMES","setScenarioNames","ADD_LOADING_MODULES","addLoadingModules","REMOVE_LOADING_MODULES","removeLoadingModules","SET_CURRENT_VIEW_OPTION","SET_UI_WEBSOCKET_DATA","SET_UI_WEBSOCKET_READY","LISTEN_TO_GRID_CREATOR","listenToGridCreator","LISTEN_TO_ROW_EDIT","listenToRowEdits","LISTEN_TO_TYPES_LIST","LISTEN_TO_BASE_MAP_CENTER","listenToBaseMapCenter","_hexToRgb","hex","result","exec","parseInt","settings","gridTransparent","BaseMap","_toggleOrthoView","viewState","orthographic","menu","includes","_onViewStateChange","setState","componentDidUpdate","prevProps","mapCenter","state","latitude","latCenter","longitude","lonCenter","pitch","bearing","_mulipleObjPicked","e","dim","pickingRadius","x","y","deckGL","pickObjects","_handleGridcellEditing","interactive","multiSelectedObj","forEach","selected","thisCellProps","object","properties","selectedCellsState","_renderSelectionTarget","_handleKeyUp","keyDownState","_handleKeyDown","nativeEvent","key","draggingWhileEditing","initialViewState","dirLightSettings","timestamp","UTC","intensity","_shadow","this","_rightClickViewRotate","_setViewStateToTableHeader","GEOGRID","header","zoom","document","getElementById","addEventListener","evt","preventDefault","layers","push","GeoJsonLayer","id","stroked","filled","wireframe","createdGrid","visible","pickable","extruded","lineWidthScale","lineWidthMinPixels","getElevation","d","getFillColor","event","cellInfo","rightButton","onDrag","onDragStart","onDragEnd","updateTriggers","transitions","onKeyDown","onKeyUp","onMouseMove","onMouseUp","onMouseDown","deck","onViewStateChange","_renderLayers","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","reuseMaps","mapboxApiAccessToken","process","mapStyle","sat","preventStyleDiffing","Component","mapDispatchToProps","connect","ROW_EDIT","BASE_MAP_CENTER","GRID_CREATED","TypesEditor","React","columns","field","lookup","No","Web","TUI","LanduseTypesList","typesArray","Object","keys","description","LBCS","JSON","stringify","NAICS","TypeCode","IDSColor","RGB","createtypesArray","types","dispatch","useDispatch","selectedRow","setSelectedRow","rowColor","setRowColor","useEffect","Grid","container","xs","s","m","l","xl","options","paging","search","selection","rowStyle","rowData","tableData","onRowClick","row","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","onRowUpdate","oldData","indexOf","onRowDelete","console","log","splice","deg_to_rad","deg","Math","PI","rad_to_deg","rad","randomProperty","obj","length","random","GridMaker","reduxState","useSelector","handleGridCreation","grid","gridProps","typesList","top_left_lon","parseFloat","top_left_lat","rotation","userPrj","projection","cell_size","cellSize","nrows","ncols","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","i","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","features","rndType","geojsonPolygon","geometry","coordinates","polygon_xy","polygon_ll","v","ll","gridCreator","TYPES_LIST","startIcon","makeGEOGRIDobject","struct","geoJsonFeatures","GEOGRID_object","newTypesList","oldType","parse","CommitGrid","reqResonse","setReqResonse","hasGrid","postGridToCityIO","URL","DATA","GEOGRIDstruct","scenario","GEOGRIDDATA_object","element","makeGEOGRIDDATAobject","tableName","toLowerCase","table_url","globalSettings","cityIO","baseURL","new_table_grid","GEOGRIDDATA","axios","method","url","headers","Accept","then","response","cityscopeJSendpoint","status","Link","reqResonseUI","catch","error","dataStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","appendChild","click","remove","downloadObjectAsJson","CenterMapButton","GridProps","borderWidth","flexWrap","projectName","tz","formValues","setformValues","handleChangeForm","target","value","noValidate","autoComplete","TextField","InputProps","onChange","textField","label","defaultValue","inputProps","max","min","helperText","EditorMenu","GridEditor","md","maxHeight","EditorMap","getScenarioIndices","get","res","scenarioIndices","filter","str","replace","promises","getScenarioName","all","r","err","getAPICall","CityIO","hashId","setHashId","hashes","setHashes","cityioURL","cityioData","CITYIO","update","newHashId","interval","newHashes","loadingModules","pickedModules","cityIOmodules","module","modules","modulesData","reduce","k","timer","clearTimeout","getModules","SelectedTable","clicked","tableURL","CityIOdeckGLmap","markerInfo","setMarkerInfo","setClicked","setZoom","INIT_VIEW","zHeight","viewport","setViewport","setInitialViewState","isHovering","markersArr","cityIOdata","table","index","RND_1","RND_2","tableHeader","coord","from","TileLayer","minZoom","maxZoom","tileSize","renderSubLayers","tile","bbox","west","south","east","north","BitmapLayer","_imageCoordinateSystem","COORDINATE_SYSTEM","CARTESIAN","bounds","LineLayer","getWidth","getSourcePosition","getTargetPosition","getColor","TextLayer","getPosition","getText","getSize","getAngle","getPixelOffset","getTextAnchor","getAlignmentBaseline","IconLayer","iconAtlas","transitionDuration","transitionInterpolator","FlyToInterpolator","iconMapping","marker","mask","getIcon","sizeScale","views","GlobeView","onHover","Boolean","getCursor","isDragging","onViewportChange","ContextProvider","_MapContext","Provider","CityIOlist","tableList","setTableList","isLoading","setIsLoading","fetchCityIOtables","cityIOlistURL","ListOfTables","tablesArr","requestArr","oldArray","toString","GetGITdate","author","branch","date","sha","link","gitMeta","setGitMeta","fetch","json","commit","divider","SplashScreen","Divider","gutterBottom","CityIOviewer","fixedPosition","LoadingSpinner","LOADING_MODULES","bottom","right","LinearProgress","listOfToggles","toggles","menuInitState","values","showOnInit","initialState","MENU","SCENARIO_NAMES","MAP","SLIDERS","time","ABM","startSimHour","currentSimHour","endSimHour","speed","animationSpeed","ABM_MODE","ACCESS_TOGGLE","SELECTED_TYPE","READY","LOADING","CURRENT_VIEW_OPTION","reducer","action","Set","UI_WEBSOCKET_DATA","UI_WEBSOCKET_READY","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rgbToHex","g","b","valToHex","c","hexToRgb","testHex","hexString","test","_proccessGridData","_proccessAccessData","accessData","heatmap","_postMapEditsToCityIO","endPoint","expectUpdateModules","val","expectUpdate","cityIOKeys","getState","has","setSelectedCellsState","deckGLRef","current","_multipleObjPicked","currentDateMidnight","setHours","_setupSunEffects","effectsRef","ambientLight","AmbientLight","dirLight","_SunLight","lightingEffect","LightingEffect","shadowColor","updateSunDirection","thisLocationTime","getTime","directionalLights","getMonth","getDay","getHours","getMinutes","getSeconds","TypeInfo","COLOR_SCALE","hoveredRadial","setHoveredRadial","typeInfo","attr","angle","proportion","use","careateData","colorType","animation","innerRadius","radialRadius","radius","getLabel","showLabels","onValueMouseOver","onSeriesMouseOut","padAngle","selectedIndex","setSelectedIndex","marks","parseTypeInfo","iconsArr","col","rgbCol","typeHasHeightProps","alignItems","typeProps","ListItemAvatar","Avatar","charAt","ListItemText","Collapse","in","Slider","valueLabelDisplay","getAriaLabel","createTypesIcons","marginLeft","subtitle1","subtitle2","ABMLegend","tripsAttr","trips","tripsData","modes","mode","profiles","profile","tripTypeValue","string","legendData","prepareLegendData","ABMSubmenu","sliders","settripTypeValue","FormControl","RadioGroup","aria-label","FormControlLabel","control","Radio","newValue","aria-labelledby","ShadowSubmenu","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","access","startColor","endColor","startTitle","endTitle","ListItemSecondaryAction","Switch","edge","checked","TogglesMenu","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","thisToggle","displayName","ABM2","ChooseScenario","chosenScenario","displayUI","loading","setLoading","autoChangeScenario","activeStep","setActiveStep","steps","Stepper","alternativeLabel","nonLinear","Step","StepButton","step","disabled","StepLabel","CircularProgress","MenuContainer","updatedMenuState","myMenuState","setChosenScenario","myChosenScenario","listenChangingOption","scenarioObject","option","PaintBrush","hoveredCells","isInteractiveCell","msg","CellMeta","hoveredObj","PaintBrushContainer","editOn","AnimationComponent","animationFrame","cancelAnimationFrame","_animate","rotateOn","ABMOn","updaters","sunEffects","setViewState","startHour","endHour","t","requestAnimationFrame","bind","AccessLayer","HeatmapLayer","colorRange","radiusPixels","threshold","getWeight","AggregatedTripsLayer","ABMmode","PathLayer","shadowEnabled","getPath","noisePath","path","ABMLayer","zoomLevel","TripsLayer","getTimestamps","timestamps","widthScale","rounded","trailLength","currentTime","GridLayer","setDraggingWhileEditing","setHoveredObj","TextualLayer","textLayerData","infoIteam","info","GeojsonLayer","fill","getLineColor","stroke","Map","pitchMap","zoomMap","autoRotate","onlyMap","setKeyDownState","setMousePos","setMouseDown","setAccess","textualData","setTextualData","geojsonData","setGeojsonData","setGEOGRID","setABM","loaded","setLoaded","useRef","shadowsOn","resetViewOn","textual","geojson","dataProps","layersKey","AGGREGATED_TRIPS","GRID","ACCESS","TEXTUAL","GEOJSON","layerOrder","layer","effects","scrollZoom","asyncRender","radarSize","Radar","radarData","setRadarData","indicators","f","domains","viz_type","ref_value","domain","createRadarData","polygons","fillOpacity","strokeWidth","axes","labels","textAnchor","tickValues","Array","BarChart","barChartData","setBarChartData","hoveredNode","setHoveredNode","generateData","dataArr","alignContent","xType","stackBy","yDomain","tickLabelAngle","AreaCalc","areaData","setAreaData","geoGridData","calcAreaObj","gridCellData","typeName","LandUseTyp","typeCode","split","shapeArea","round","ShapeArea","hasOwnProperty","area","radialData","calcAreaForHCM","count","calcArea","labelsRadiusMultiplier","labelsStyle","font","textShadow","VisContainer","CSjsMain","direction","CityScopeJS","setTableName","isDone","setIsdone","location","pre","cityscopePrjName","substring","isReady","PrjDeckGLMap","viewSettings","localStorage","getItem","vs","setItem","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","matrixToTransform","matrix","join","vectorToTransform","vector","halfAnchor","styles","cursor","AnchorComponent","translation","onMouseEnter","transform","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","Keystoner","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","onAnchorMouseUp","isEditMode","newVector","getBoundingClientRect","ls","removeEventListener","anchorStyle","anchorClassName","DeleteLocalStorage","justify","Keystone","editMode","setEditMode","removeItem","reload","TableNameInput","setSelectedTable","buttonsArr","cityIOtableBaseUrl","geogridUrl","UIWebsocket","socket","WebSocket","SOCKETS","onopen","send","onmessage","setUIWebsocketReady","setUIWebsocketData","isCityIOready","isSocketUIready","selectedTable","mt","CSjsMainCustom","onlyOptionMenu","mapAndChartSidebar","onlyChartSidebar","CityScopeJSMapCenter","CityScopeJSChartSidebar","CityScopeJSOptionsMenu","routes","App","routing","useRoutes","ThemeProvider","ProviderWrapper","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.27e07ac0.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        \"@global\": {\r\n            \"*\": {\r\n                boxSizing: \"border-box\",\r\n                margin: 0,\r\n                padding: 0,\r\n            },\r\n            html: {\r\n                \"-webkit-font-smoothing\": \"antialiased\",\r\n                \"-moz-osx-font-smoothing\": \"grayscale\",\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n            },\r\n            body: {\r\n                backgroundColor: \"#18191a\",\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n            },\r\n            a: {\r\n                textDecoration: \"none\",\r\n            },\r\n            \"#root\": {\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n            },\r\n        },\r\n    })\r\n);\r\n\r\nconst GlobalStyles = () => {\r\n    useStyles();\r\n\r\n    return null;\r\n};\r\n\r\nexport default GlobalStyles;\r\n","const typography = {\r\n    fontFamily: `\"Roboto Mono\", sans-serif`,\r\n    fontSize: 12,\r\n    fontWeightLight: 100,\r\n    fontWeightRegular: 500,\r\n    fontWeightMedium: 700,\r\n\r\n    h1: {\r\n        fontWeight: 700,\r\n        fontSize: 45,\r\n        letterSpacing: \"-1px\",\r\n    },\r\n    h2: {\r\n        fontWeight: 800,\r\n        fontSize: 29,\r\n        letterSpacing: \"-0.24px\",\r\n    },\r\n    h3: {\r\n        fontWeight: 700,\r\n        fontSize: 24,\r\n        letterSpacing: \"-0.06px\",\r\n    },\r\n    h4: {\r\n        fontWeight: 500,\r\n        fontSize: 20,\r\n        letterSpacing: \"-0.06px\",\r\n    },\r\n    h5: {\r\n        fontWeight: 500,\r\n        fontSize: 16,\r\n        letterSpacing: \"-0.05px\",\r\n    },\r\n    h6: {\r\n        fontWeight: 500,\r\n        fontSize: 14,\r\n        letterSpacing: \"-0.05px\",\r\n    },\r\n    overline: {\r\n        fontWeight: 500,\r\n    },\r\n};\r\n\r\nexport default typography;\r\n","import { createMuiTheme, colors } from '@material-ui/core'\r\nimport typography from './typography'\r\n\r\nconst theme = createMuiTheme({\r\n  zIndex: {\r\n    appBar: 999,\r\n  },\r\n  palette: {\r\n    background: {\r\n      default: '#ff5278', //255, 82, 120\r\n      paper: '#18191a',\r\n      dark: '#ff5278',\r\n    },\r\n    primary: {\r\n      main: '#FFF',\r\n      light: '#ff5278',\r\n    },\r\n    secondary: {\r\n      main: '#ff5278',\r\n    },\r\n\r\n    text: {\r\n      primary: colors.grey[100],\r\n      secondary: '#ff5278',\r\n    },\r\n  },\r\n\r\n  typography,\r\n  shape: {\r\n    borderRadius: 20,\r\n  },\r\n\r\n  overrides: {\r\n    MuiListItem: {\r\n      root: {\r\n        '&$selected': {\r\n          backgroundColor: '#18191a',\r\n          boxShadow:\r\n            '12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)',\r\n          '&:hover': {\r\n            backgroundColor: '#ff5278',\r\n          },\r\n        },\r\n      },\r\n      button: {\r\n        '&:hover': {\r\n          backgroundColor: '#ff5278',\r\n        },\r\n      },\r\n    },\r\n\r\n    MuiOutlinedInput: {\r\n      notchedOutline: {\r\n        borderColor: '#ff5278',\r\n      },\r\n    },\r\n    MuiAppBar: {\r\n      colorPrimary: { backgroundColor: '#18191a', color: '#FFF' },\r\n    },\r\n    MuiDivider: {\r\n      root: {\r\n        backgroundColor: '#FFF',\r\n        opacity: 0.1,\r\n      },\r\n    },\r\n    MuiCard: {\r\n      root: {\r\n        boxShadow:\r\n          '12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)',\r\n      },\r\n    },\r\n    MuiButton: {\r\n      root: {\r\n        boxShadow:\r\n          '12px 12px 16px 0 rgba(0,0,0),-8px -8px 12px 0 rgba(40,41,42)',\r\n        '&:hover': {\r\n          boxShadow: '12px 12px 16px 0  #000,-2px -2px 16px 0  #ff5278',\r\n        },\r\n        // width: \"100%\",\r\n      },\r\n    },\r\n  },\r\n})\r\n\r\nexport default theme\r\n","import React from \"react\";\r\nimport { NavLink as RouterLink } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, ListItem, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    item: {\r\n        display: \"flex\",\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n    },\r\n    button: {\r\n        color: theme.palette.text.main,\r\n        fontWeight: theme.typography.fontWeightMedium,\r\n        justifyContent: \"flex-start\",\r\n        letterSpacing: 0,\r\n        padding: \"10px 8px\",\r\n        textTransform: \"none\",\r\n        width: \"100%\",\r\n    },\r\n    icon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    title: {\r\n        marginRight: \"auto\",\r\n    },\r\n    active: {\r\n        color: theme.palette.text.secondary,\r\n        \"& $title\": {\r\n            fontWeight: theme.typography.fontWeightBold,\r\n        },\r\n        \"& $icon\": {\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    },\r\n}));\r\n\r\nconst NavItem = ({ className, href, icon: Icon, title, ...rest }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <ListItem\r\n            className={clsx(classes.item, className)}\r\n            disableGutters\r\n            {...rest}\r\n        >\r\n            <Button\r\n                activeClassName={classes.active}\r\n                className={classes.button}\r\n                component={RouterLink}\r\n                to={href}\r\n            >\r\n                {Icon && <Icon className={classes.icon} size=\"20\" />}\r\n                <span className={classes.title}>{title}</span>\r\n            </Button>\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nNavItem.propTypes = {\r\n    className: PropTypes.string,\r\n    href: PropTypes.string,\r\n    icon: PropTypes.elementType,\r\n    title: PropTypes.string,\r\n};\r\n\r\nexport default NavItem;\r\n","import PropTypes from 'prop-types'\r\nimport GitHubIcon from '@material-ui/icons/GitHub'\r\nimport FormatShapesIcon from '@material-ui/icons/FormatShapes'\r\nimport {\r\n  Box,\r\n  Drawer,\r\n  Fab,\r\n  List,\r\n  Typography,\r\n  makeStyles,\r\n  Card,\r\n  CardContent,\r\n} from '@material-ui/core'\r\nimport { BarChart as BarChartIcon, Map as MapIcon } from 'react-feather'\r\nimport NavItem from './NavItem'\r\n\r\nconst items = [\r\n  {\r\n    href: '/',\r\n    icon: MapIcon,\r\n    title: 'CityScopeJS',\r\n  },\r\n  {\r\n    href: '/editor',\r\n    icon: BarChartIcon,\r\n    title: 'Grid Editor',\r\n  },\r\n  {\r\n    href: '/projection',\r\n    icon: FormatShapesIcon,\r\n    title: 'Projection Mapping',\r\n  },\r\n]\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  mobileDrawer: {\r\n    width: '30vw',\r\n    top: 48,\r\n    height: 'calc(100% - 48px)',\r\n    boxShadow: '22px 22px 22px 0 rgba(0,0,0)',\r\n  },\r\n}))\r\n\r\nconst NavBar = ({ openNavDrawer, onMobileNavOpen }) => {\r\n  const classes = useStyles()\r\n\r\n  const content = (\r\n    <Box height=\"100%\" display=\"flex\" flexDirection=\"column\" p={3}>\r\n      <List>\r\n        {items.map((item) => (\r\n          <NavItem\r\n            style={{ padding: '2vh' }}\r\n            href={item.href}\r\n            key={item.title}\r\n            title={item.title}\r\n            icon={item.icon}\r\n            onClick={onMobileNavOpen}\r\n          />\r\n        ))}\r\n      </List>\r\n\r\n      <Box flexGrow={1} />\r\n      <Card elevation={5} p={2}>\r\n        <CardContent position={'bottom'}>\r\n          <Fab\r\n            href=\"http://github.com/CityScope/CS_cityscopeJS/\"\r\n            color=\"default\"\r\n            size=\"small\"\r\n          >\r\n            <GitHubIcon />\r\n          </Fab>\r\n          <Box p={2} />\r\n          <Typography align=\"left\" variant=\"h5\">\r\n            MIT CityScope\r\n          </Typography>\r\n          <Typography align=\"left\" variant=\"caption\">\r\n            {new Date().getFullYear()}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Drawer\r\n        anchor=\"left\"\r\n        classes={{ paper: classes.mobileDrawer }}\r\n        open={openNavDrawer}\r\n        elevation={10}\r\n        variant=\"persistent\"\r\n      >\r\n        {content}\r\n      </Drawer>\r\n    </>\r\n  )\r\n}\r\n\r\nNavBar.propTypes = {\r\n  onMobileNavOpen: PropTypes.func,\r\n  openNavDrawer: PropTypes.bool,\r\n}\r\n\r\nNavBar.defaultProps = {\r\n  onMobileClose: () => {},\r\n  openNavDrawer: false,\r\n}\r\n\r\nexport default NavBar\r\n","import React from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport clsx from \"clsx\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    AppBar,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n    makeStyles,\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {},\r\n}));\r\n\r\nconst TopBar = ({ className, onMobileNavOpen, ...rest }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar\r\n            className={clsx(classes.root, className)}\r\n            elevation={5}\r\n            {...rest}\r\n        >\r\n            <Toolbar variant=\"dense\">\r\n                <IconButton color=\"inherit\" onClick={onMobileNavOpen}>\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <RouterLink to=\"/\">\r\n                    <Typography\r\n                        className={classes.name}\r\n                        color=\"textPrimary\"\r\n                        variant=\"h5\"\r\n                    >\r\n                        MIT CityScope\r\n                    </Typography>\r\n                </RouterLink>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nTopBar.propTypes = {\r\n    className: PropTypes.string,\r\n    onMobileNavOpen: PropTypes.func,\r\n};\r\n\r\nexport default TopBar;\r\n","import React, { useState } from 'react'\r\nimport { Outlet } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport NavBar from './NavBar'\r\nimport TopBar from './TopBar'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background,\r\n    display: 'flex',\r\n    height: '100%',\r\n    overflow: 'hidden',\r\n    width: '100%',\r\n  },\r\n\r\n  content: {\r\n    paddingTop: 48,\r\n    flex: '1 1 auto',\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n}))\r\n\r\nconst MainLayout = () => {\r\n  const classes = useStyles()\r\n  const [navMenuState, setNavMenuState] = useState(true)\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <NavBar\r\n        openNavDrawer={!navMenuState}\r\n        onMobileNavOpen={() => setNavMenuState(!navMenuState)}\r\n      />\r\n      <TopBar onMobileNavOpen={() => setNavMenuState(!navMenuState)} />\r\n      <div className={classes.content}>\r\n        <Outlet />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainLayout\r\n","import React, { forwardRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\r\n    return (\r\n        <div ref={ref} {...rest}>\r\n            <Helmet>\r\n                <title>\r\n                    CityScopeJS {\">\"} {title}\r\n                </title>\r\n            </Helmet>\r\n            {children}\r\n        </div>\r\n    );\r\n});\r\n\r\nPage.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    title: PropTypes.string,\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport { Box, Container, Typography, makeStyles } from \"@material-ui/core\";\r\nimport Page from \"../../layouts/Page\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background,\r\n    height: \"100%\",\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n  image: {\r\n    marginTop: 50,\r\n    display: \"inline-block\",\r\n    maxWidth: \"100%\",\r\n    width: 560,\r\n  },\r\n}));\r\n\r\nconst NotFoundView = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Page className={classes.root} title=\"404\">\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Container maxWidth=\"md\">\r\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h1\">\r\n            404\r\n          </Typography>\r\n          <Typography align=\"center\" color=\"textPrimary\" variant=\"h5\">\r\n            The page you are looking for isn’t here\r\n          </Typography>\r\n        </Container>\r\n      </Box>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default NotFoundView;\r\n","import React from \"react\";\r\n\r\n/**\r\n * cell selection\r\n * meta div\r\n * @param {*} props\r\n */\r\n\r\nexport default function SelectionTarget(props) {\r\n    if (!props.mousePos) return null;\r\n    const mousePos = props.mousePos;\r\n    const selectedType = props.selectedType;\r\n    const divSize = props.divSize;\r\n\r\n    const colorTrans =\r\n        \"rgba(\" +\r\n        selectedType.color[0] +\r\n        \",\" +\r\n        selectedType.color[1] +\r\n        \",\" +\r\n        selectedType.color[2] +\r\n        \",0.6)\";\r\n    let mouseX = mousePos.clientX - divSize / 2;\r\n    let mouseY = mousePos.clientY - divSize / 2;\r\n    return (\r\n        <div\r\n            style={{\r\n                border: \"2px solid\",\r\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\r\n                borderColor: selectedType.color,\r\n                color: selectedType.color,\r\n                borderRadius: \"15%\",\r\n                position: \"fixed\",\r\n                zIndex: 1,\r\n                pointerEvents: \"none\",\r\n                width: divSize,\r\n                height: divSize,\r\n                left: mouseX,\r\n                top: mouseY,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    position: \"relative\",\r\n                    left: divSize + 10,\r\n                    fontSize: \"0.5em\",\r\n                }}\r\n            >\r\n                {selectedType.name}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","/**\r\n * CSjs ACTIONS\r\n */\r\nexport const GET_CITYIO_DATA = 'GET_CITYIO_DATA'\r\nexport function getCityioData(data) {\r\n  return { type: GET_CITYIO_DATA, data }\r\n}\r\n\r\nexport const LISTEN_TO_MAP_EVENTS = 'LISTEN_TO_MAP_EVENTS'\r\nexport function listenToMapEvents(data) {\r\n  return { type: LISTEN_TO_MAP_EVENTS, data }\r\n}\r\n\r\nexport const LISTEN_TO_ABM_SLIDERS = 'LISTEN_TO_ABM_SLIDERS'\r\nexport function listenToSlidersEvents(data) {\r\n  return { type: LISTEN_TO_ABM_SLIDERS, data }\r\n}\r\n\r\nexport const LISTEN_TO_ABM_MODE = 'LISTEN_TO_ABM_MODE'\r\nexport function listenToABMmode(data) {\r\n  return { type: LISTEN_TO_ABM_MODE, data }\r\n}\r\n\r\nexport const LISTEN_TO_ACCESS_TOGGLE = 'LISTEN_TO_ACCESS_TOGGLE'\r\nexport function listenToAccessToggle(data) {\r\n  return { type: LISTEN_TO_ACCESS_TOGGLE, data }\r\n}\r\n\r\nexport const MENU_INTERACTION = 'MENU_INTERACTION'\r\nexport function listenToMenuUI(data) {\r\n  return { type: MENU_INTERACTION, data }\r\n}\r\n\r\nexport const LISTEN_TO_EDIT_MENU = 'LISTEN_TO_EDIT_MENU'\r\nexport function listenToEditMenu(data) {\r\n  return { type: LISTEN_TO_EDIT_MENU, data }\r\n}\r\n\r\nexport const SET_READY_STATE = 'SET_READY_STATE'\r\nexport function setReadyState(data) {\r\n  return { type: SET_READY_STATE, data }\r\n}\r\n\r\nexport const SET_LOADING_STATE = 'SET_LOADING_STATE'\r\nexport function setLoadingState(data) {\r\n  return { type: SET_LOADING_STATE, data }\r\n}\r\n\r\nexport const SET_SCENARIO_NAMES = 'SET_SCENARIO_NAMES'\r\nexport function setScenarioNames(data) {\r\n  return { type: SET_SCENARIO_NAMES, data }\r\n}\r\n\r\nexport const ADD_LOADING_MODULES = 'ADD_LOADING_MODULES'\r\nexport function addLoadingModules(data) {\r\n  return { type: ADD_LOADING_MODULES, data }\r\n}\r\n\r\nexport const REMOVE_LOADING_MODULES = 'REMOVE_LOADING_MODULES'\r\nexport function removeLoadingModules(data) {\r\n  return { type: REMOVE_LOADING_MODULES, data }\r\n}\r\n\r\nexport const SET_CURRENT_VIEW_OPTION = 'SET_CURRENT_VIEW_OPTION'\r\nexport function setCurrentViewOption(data) {\r\n  return { type: SET_CURRENT_VIEW_OPTION, data }\r\n}\r\n\r\n/**\r\n * PROJECTION MAPPING Actions\r\n */\r\n\r\nexport const SET_UI_WEBSOCKET_DATA = 'SET_UI_WEBSOCKET_DATA'\r\nexport function setUIWebsocketData(data) {\r\n  return { type: SET_UI_WEBSOCKET_DATA, data }\r\n}\r\n\r\nexport const SET_UI_WEBSOCKET_READY = 'SET_UI_WEBSOCKET_READY'\r\nexport function setUIWebsocketReady(data) {\r\n  return { type: SET_UI_WEBSOCKET_READY, data }\r\n}\r\n\r\n/**\r\n * Editor Actions\r\n */\r\n\r\nexport const LISTEN_TO_GRID_CREATOR = 'LISTEN_TO_GRID_CREATOR'\r\nexport function listenToGridCreator(data) {\r\n  return { type: LISTEN_TO_GRID_CREATOR, data }\r\n}\r\n\r\nexport const LISTEN_TO_ROW_EDIT = 'LISTEN_TO_ROW_EDIT'\r\nexport function listenToRowEdits(data) {\r\n  return { type: LISTEN_TO_ROW_EDIT, data }\r\n}\r\n\r\nexport const LISTEN_TO_TYPES_LIST = 'LISTEN_TO_TYPES_LIST'\r\nexport function listeonToTypesList(data) {\r\n  return { type: LISTEN_TO_TYPES_LIST, data }\r\n}\r\n\r\nexport const LISTEN_TO_BASE_MAP_CENTER = 'LISTEN_TO_BASE_MAP_CENTER'\r\nexport function listenToBaseMapCenter(data) {\r\n  return { type: LISTEN_TO_BASE_MAP_CENTER, data }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport EditorBrush from \"./EditorBrush\";\r\nimport { connect } from \"react-redux\";\r\nimport { StaticMap } from \"react-map-gl\";\r\nimport DeckGL from \"@deck.gl/react\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { GeoJsonLayer } from \"deck.gl\";\r\nimport settings from \"../../../settings/GridEditorSettings.json\";\r\n// import scenarioGeojson from \"../../../settings/LandUse_0_color.json\";\r\nimport { listenToBaseMapCenter } from \"../../../redux/actions\";\r\n\r\nexport const _hexToRgb = (hex) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n        ? [\r\n            parseInt(result[1], 16),\r\n            parseInt(result[2], 16),\r\n            parseInt(result[3], 16),\r\n            settings.map.gridTransparent,\r\n        ]\r\n        : null;\r\n};\r\n\r\nclass BaseMap extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedType: null,\r\n            draggingWhileEditing: false,\r\n            selectedCellsState: null,\r\n            pickingRadius: 40,\r\n            viewState: settings.map.initialViewState,\r\n        };\r\n\r\n        this.dirLightSettings = {\r\n            timestamp: Date.UTC(2019, 7, 1, 12),\r\n            color: [255, 255, 255],\r\n            intensity: 1.0,\r\n            _shadow: true,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // fix deck view rotate\r\n        this._rightClickViewRotate();\r\n\r\n        // zoom map on CS table location\r\n        this._setViewStateToTableHeader();\r\n    }\r\n\r\n    _toggleOrthoView = (viewState) => {\r\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\r\n            ? true\r\n            : false;\r\n    };\r\n\r\n    _onViewStateChange = ({ viewState }) => {\r\n        this.setState({ viewState });\r\n    };\r\n\r\n    componentDidUpdate = (prevProps) => {\r\n        if (this.props.mapCenter !== prevProps.mapCenter)\r\n            this.setState({\r\n                viewState: {\r\n                    ...this.state.viewState,\r\n                    latitude: this.props.mapCenter.latCenter,\r\n                    longitude: this.props.mapCenter.lonCenter,\r\n                    pitch: 0,\r\n                    bearing: 0,\r\n                    orthographic: false,\r\n                },\r\n            });\r\n    };\r\n\r\n    /**\r\n     * resets the camera viewport\r\n     * to cityIO header data\r\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\r\n     */\r\n    _setViewStateToTableHeader() {\r\n        this.setState({\r\n            viewState: {\r\n                ...this.state.viewState,\r\n                latitude: settings.GEOGRID.properties.header.latitude,\r\n                longitude: settings.GEOGRID.properties.header.longitude,\r\n                zoom: 15,\r\n                pitch: 0,\r\n                bearing: 0,\r\n                orthographic: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Description. fix deck issue\r\n     * with rotate right botton\r\n     */\r\n    _rightClickViewRotate() {\r\n        document\r\n            .getElementById(\"deckgl-wrapper\")\r\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\r\n    }\r\n\r\n    /**\r\n     * Description. uses deck api to\r\n     * collect objects in a region\r\n     * @argument{object} e  picking event\r\n     */\r\n    _mulipleObjPicked = (e) => {\r\n        const dim = this.state.pickingRadius;\r\n        const x = e.x - dim / 2;\r\n        const y = e.y - dim / 2;\r\n        let mulipleObj = this.deckGL.pickObjects({\r\n            x: x,\r\n            y: y,\r\n            width: dim,\r\n            height: dim,\r\n        });\r\n        return mulipleObj;\r\n    };\r\n\r\n    /**\r\n     * Description. allow only to pick cells that are\r\n     *  not of CityScope TUI & that are interactable\r\n     * so to not overlap TUI activity\r\n     */\r\n    _handleGridcellEditing = (e) => {\r\n        if (!this.props.selectedType) return;\r\n        const { height, name, color, interactive } = this.props.selectedType;\r\n        const multiSelectedObj = this._mulipleObjPicked(e);\r\n\r\n        multiSelectedObj.forEach((selected) => {\r\n            let thisCellProps = selected.object.properties;\r\n            thisCellProps.color = _hexToRgb(color);\r\n            thisCellProps.height = parseInt(height);\r\n            thisCellProps.name = name;\r\n            if (interactive !== \"No\") {\r\n                thisCellProps.interactive = interactive;\r\n            } else {\r\n                delete thisCellProps.interactive;\r\n            }\r\n        });\r\n        this.setState({\r\n            selectedCellsState: multiSelectedObj,\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Description.\r\n     * draw target area around mouse\r\n     */\r\n    _renderSelectionTarget = () => {\r\n        return (\r\n            this.props.selectedType && (\r\n                <EditorBrush\r\n                    mousePos={this.state.mousePos}\r\n                    selectedType={this.props.selectedType}\r\n                    divSize={this.state.pickingRadius}\r\n                    mouseDown={this.state.mouseDown}\r\n                />\r\n            )\r\n        );\r\n    };\r\n\r\n    _handleKeyUp = () => {\r\n        this.setState({ keyDownState: null });\r\n    };\r\n\r\n    _handleKeyDown = (e) => {\r\n        // avoid common clicks\r\n        this.setState({ keyDownState: e.nativeEvent.key });\r\n    };\r\n\r\n    /**\r\n     * renders deck gl layers\r\n     */\r\n    _renderLayers() {\r\n        let layers = [];\r\n        layers.push(\r\n            new GeoJsonLayer({\r\n                id: \"GRID\",\r\n                opacity: 0.5,\r\n                stroked: false,\r\n                filled: true,\r\n                wireframe: true,\r\n                data: this.props.createdGrid,\r\n                visible: true,\r\n                pickable: true,\r\n                extruded: true,\r\n                lineWidthScale: 1,\r\n                lineWidthMinPixels: 1,\r\n                getElevation: (d) => d.properties.height,\r\n                getFillColor: (d) => d.properties.color,\r\n\r\n                onClick: (event, cellInfo) => {\r\n                    if (\r\n                        !cellInfo.rightButton &&\r\n                        this.state.keyDownState !== \"Shift\"\r\n                    )\r\n                        this._handleGridcellEditing(event);\r\n                },\r\n\r\n                onDrag: (event, cellInfo) => {\r\n                    if (\r\n                        !cellInfo.rightButton &&\r\n                        this.state.keyDownState !== \"Shift\"\r\n                    )\r\n                        this._handleGridcellEditing(event);\r\n                },\r\n                onDragStart: (event, cellInfo) => {\r\n                    if (\r\n                        !cellInfo.rightButton &&\r\n                        this.state.keyDownState !== \"Shift\"\r\n                    ) {\r\n                        this.setState({ draggingWhileEditing: true });\r\n                    }\r\n                },\r\n                onDragEnd: () => {\r\n                    this.setState({ draggingWhileEditing: false });\r\n                },\r\n                updateTriggers: {\r\n                    getFillColor: this.state.selectedCellsState,\r\n                    getElevation: this.state.selectedCellsState,\r\n                },\r\n                transitions: {\r\n                    getFillColor: 500,\r\n                    getElevation: 500,\r\n                },\r\n            })\r\n        );\r\n\r\n        // layers.push(\r\n        //     new GeoJsonLayer({\r\n        //         id: 'scenario-geojson-layer',\r\n        //         data: scenarioGeojson,\r\n        //         opacity: 1,\r\n        //         pickable: false,\r\n        //         stroked: true,\r\n        //         filled: true,\r\n        //         extruded: false,\r\n        //         // lineWidthScale: 2,\r\n        //         // lineWidthMinPixels: 2,\r\n        //         getFillColor: d => _hexToRgb(d.properties.fill),\r\n        //         getLineWidth: 0.5,\r\n        //         // getFillColor: [163, 155, 8, 200],\r\n        //         // getLineColor: d => colorToRGBArray(d.properties.color),\r\n        //         // getRadius: 100,\r\n        //         // getLineWidth: 2,\r\n        //         // getElevation: 30\r\n        //     })\r\n        // )\r\n\r\n        return layers;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"baseMap\"\r\n                onKeyDown={this._handleKeyDown}\r\n                onKeyUp={this._handleKeyUp}\r\n                onMouseMove={(e) =>\r\n                    this.setState({\r\n                        mousePos: e.nativeEvent,\r\n                    })\r\n                }\r\n                onMouseUp={() =>\r\n                    this.setState({\r\n                        mouseDown: false,\r\n                    })\r\n                }\r\n                onMouseDown={() =>\r\n                    this.setState({\r\n                        mouseDown: true,\r\n                    })\r\n                }\r\n            >\r\n                {this._renderSelectionTarget()}\r\n\r\n                <DeckGL\r\n                    // sets the cursor on paint\r\n                    // getCursor={() => \"none\"}\r\n                    ref={(ref) => {\r\n                        // save a reference to the Deck instance\r\n                        this.deckGL = ref && ref.deck;\r\n                    }}\r\n                    viewState={this.state.viewState}\r\n                    onViewStateChange={this._onViewStateChange}\r\n                    layers={this._renderLayers()}\r\n                    controller={{\r\n                        touchZoom: true,\r\n                        touchRotate: true,\r\n                        dragPan: !this.state.draggingWhileEditing,\r\n                        dragRotate: !this.state.draggingWhileEditing,\r\n                        keyboard: false,\r\n                    }}\r\n                >\r\n                    <StaticMap\r\n                        dragRotate={true}\r\n                        reuseMaps={true}\r\n                        mapboxApiAccessToken={\r\n                            process.env.REACT_APP_MAPBOX_TOKEN\r\n                        }\r\n                        mapStyle={settings.map.mapStyle.sat}\r\n                        preventStyleDiffing={true}\r\n                    />\r\n                </DeckGL>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    listenToBaseMapCenter: listenToBaseMapCenter,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedType: state.ROW_EDIT,\r\n        mapCenter: state.BASE_MAP_CENTER,\r\n        createdGrid: state.GRID_CREATED,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap);\r\n","import MaterialTable from '@material-table/core'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Grid, Typography } from '@material-ui/core'\r\n\r\nimport {\r\n  listenToRowEdits,\r\n  listeonToTypesList,\r\n  listenToGridCreator,\r\n} from '../../../../redux/actions'\r\nimport { useDispatch } from 'react-redux'\r\nimport settings from '../../../../settings/GridEditorSettings.json'\r\nimport { CloudLightning } from 'react-feather'\r\n\r\nexport default function TypesEditor() {\r\n  const createtypesArray = (LanduseTypesList) => {\r\n    let typesArray = []\r\n    Object.keys(LanduseTypesList).forEach((type) => {\r\n      typesArray.push({\r\n        name: type,\r\n        description: 'description for: ' + type,\r\n        color: LanduseTypesList[type].color,\r\n        height: LanduseTypesList[type].height\r\n          ? LanduseTypesList[type].height\r\n          : 0,\r\n\r\n        LBCS: LanduseTypesList[type].LBCS\r\n          ? JSON.stringify(LanduseTypesList[type].LBCS)\r\n          : null,\r\n        NAICS: LanduseTypesList[type].NAICS\r\n          ? JSON.stringify(LanduseTypesList[type].NAICS)\r\n          : null,\r\n        interactive: LanduseTypesList[type].interactive\r\n          ? LanduseTypesList[type].interactive\r\n          : \"web\",\r\n        TypeCode: LanduseTypesList[type].TypeCode\r\n          ? LanduseTypesList[type].TypeCode\r\n          : null,\r\n        IDSColor: LanduseTypesList[type].IDSColor\r\n          ? LanduseTypesList[type].IDSColor\r\n          : null,\r\n        RGB: LanduseTypesList[type].RGB\r\n          ? LanduseTypesList[type].RGB\r\n          : null,\r\n      })\r\n    })\r\n    return typesArray\r\n  }\r\n\r\n  const [state, setState] = React.useState({\r\n    columns: [\r\n      {\r\n        title: 'Type',\r\n        field: 'name',\r\n      },\r\n      {\r\n        title: 'Description',\r\n        field: 'description',\r\n      },\r\n\r\n      {\r\n        title: 'Height',\r\n        field: 'height',\r\n        type: 'numeric',\r\n      },\r\n      {\r\n        title: 'Interactive',\r\n        field: 'interactive',\r\n        lookup: { No: 'No', Web: 'Web', TUI: 'TUI' },\r\n      },\r\n      {\r\n        title: 'Color',\r\n        field: 'color',\r\n        type: 'string',\r\n      },\r\n      {\r\n        title: 'LBCS',\r\n        field: 'LBCS',\r\n        type: 'string',\r\n      },\r\n      {\r\n        title: 'NAICS',\r\n        field: 'NAICS',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    data: createtypesArray(settings.GEOGRID.properties.types),\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n  const [selectedRow, setSelectedRow] = useState(null)\r\n  const [rowColor, setRowColor] = useState(null)\r\n\r\n  // redux the type list on every change\r\n  useEffect(() => {\r\n    dispatch(listeonToTypesList(state.data))\r\n  })\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={12} s={12} m={12} l={12} xl={12}>\r\n        <MaterialTable\r\n          title={<Typography variant=\"h2\">Types Editor</Typography>}\r\n          columns={state.columns}\r\n          data={state.data}\r\n          options={{\r\n            paging: false,\r\n            search: true,\r\n            selection: false,\r\n            rowStyle: (rowData) => ({\r\n              fontFamily: 'Roboto Mono',\r\n              fontSize: 12,\r\n              backgroundColor:\r\n                selectedRow === rowData.tableData.id ? rowColor : null,\r\n            }),\r\n          }}\r\n          onRowClick={(evt, row) => {\r\n            setSelectedRow(row.tableData.id)\r\n            setRowColor(row.color)\r\n            dispatch(listenToRowEdits(row))\r\n          }}\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                  resolve()\r\n                  setState((prevState) => {\r\n                    const data = [...prevState.data]\r\n                    data.push(newData)\r\n                    return { ...prevState, data }\r\n                  })\r\n                }, 200)\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                  resolve()\r\n                  if (oldData) {\r\n                    setState((prevState) => {\r\n                      const data = [...prevState.data]\r\n                      data[data.indexOf(oldData)] = newData\r\n\r\n                      return { ...prevState, data }\r\n                    })\r\n                  }\r\n\r\n                  // dispath change to redux\r\n                  dispatch(listenToRowEdits(newData))\r\n                }, 200)\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve) => {\r\n                console.log(oldData)\r\n\r\n                setTimeout(() => {\r\n                  resolve()\r\n                  setState((prevState) => {\r\n                    const data = [...prevState.data]\r\n                    data.splice(data.indexOf(oldData), 1)\r\n                    return { ...prevState, data }\r\n                  })\r\n\r\n                  dispatch(listenToGridCreator(null))\r\n                }, 200)\r\n              }),\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n","import proj4 from \"proj4\";\r\nimport { _hexToRgb } from \"../../../EditorMap/EditorMap\";\r\nimport scenario from '../../../../../settings/settings.json';\r\nimport { featureCollection, centroid, bbox, tag } from \"@turf/turf\";\r\nfunction deg_to_rad(deg) {\r\n    return (deg * Math.PI) / 180;\r\n}\r\nfunction rad_to_deg(rad) {\r\n    return (rad * 180) / Math.PI;\r\n}\r\n\r\nconst randomProperty = (obj) => {\r\n    var keys = Object.keys(obj);\r\n    return obj[keys[(keys.length * Math.random()) << 0]];\r\n};\r\n\r\nconst convertScenarioToWGS84 = (types) => {\r\n    let features = scenario.features;\r\n    // console.log(types);\r\n    for (let i = 0; i < features.length; i++) {\r\n        var color = types.find((el) => {\r\n            // console.log(el.TypeCode);\r\n            return el.TypeCode === features[i].properties['TypeCode']\r\n        });\r\n        // console.log(features[i].properties['TypeCode']);\r\n        // console.log(color);\r\n        color = color.color\r\n        // if(typeof color !== 'undefined'){\r\n        // }\r\n        if (typeof color == 'undefined') {\r\n            console.log('undefine TypeCode', features[i].properties['TypeCode']);\r\n        }\r\n        let rgbArr = (features[i].properties['RGB']).split(',')\r\n        rgbArr = rgbArr.map(el => parseFloat(el));\r\n        rgbArr.push(220);\r\n\r\n        // let height = 0;\r\n        // if (features[i].properties.Height) {\r\n        //     height = features[i].properties.Height\r\n        //     if (height.includes(\"-\")) {\r\n        //         height = height.split('');\r\n        //         height = height[height.length - 1];\r\n        //     }\r\n        //     height = parseFloat(height);\r\n        // }\r\n\r\n        // features[i].properties.height = height;\r\n        features[i].properties.color = rgbArr;\r\n        // features[i].properties.color = JSON.parse(features[i].properties.color);\r\n        features[i].properties.stroke = '#3f3f3f';\r\n        features[i].properties['stroke-width'] = 0.5;\r\n        features[i].properties['stroke-opacity'] = 1;\r\n        features[i].properties['fill'] = color;\r\n        features[i].properties['fill-opacity'] = 1;\r\n    }\r\n    let geojson = {\r\n        \"type\": \"FeatureCollection\",\r\n        \"features\": features,\r\n    }\r\n    // console.log(geojson);\r\n    console.log(JSON.stringify(geojson));\r\n}\r\n\r\nconst VN2kToWGSMultiLineString = (coordinates, userPrj) => {\r\n    for (let i = 0; i < coordinates.length; i++) {\r\n        for (let j = 0; j < coordinates[i].length; j++) {\r\n            coordinates[i][j] = proj4(userPrj, proj4.defs(\"EPSG:4326\"), coordinates[i][j]);\r\n        }\r\n    }\r\n    return coordinates;\r\n}\r\n\r\nconst joinGridAndPrivateGeojson = (privateGeojson, gridGeojson, types) => {\r\n    // Get grid cell centroids\r\n    let gridCentroids = featureCollection(gridGeojson.features.map(obj => {\r\n        let cellCentroid = centroid(obj)\r\n        cellCentroid.properties = {\r\n            'color': undefined,\r\n        } // Later populated with the sjoin\r\n        return cellCentroid\r\n    }))\r\n\r\n    // Assing landuse to centroid with polygons (Spatial join)\r\n    let gridCentroidsWithLanduse = tag(gridCentroids, privateGeojson, 'color', 'color')\r\n\r\n    // Set each cell properties according to types\r\n    for (let i = 0; i < gridCentroidsWithLanduse.features.length; i++) {\r\n        let obj = gridCentroidsWithLanduse.features[i];\r\n\r\n        // let selected_type;\r\n        // if (obj.properties.name === undefined) {\r\n        //     // Default landuse is Residential (this must change)\r\n        //     selected_type = types.filter(type => type.name === 'Residential')[0]\r\n        // } else {\r\n        //     selected_type = types.filter(type => type.name === obj.properties.name)[0]\r\n        // }\r\n\r\n        // gridGeojson.features[i].properties = {\r\n        //     color: _hexToRgb(selected_type.color),\r\n        //     height: selected_type.height,\r\n        //     name: selected_type.name,\r\n        //     interactive: selected_type.interactive,\r\n        //     id: i,\r\n        // }\r\n\r\n        /* my self */\r\n        gridGeojson.features[i].properties.color = _hexToRgb(obj.properties.color);\r\n    }\r\n}\r\n\r\nexport const gridCreator = (gridProps, typesList) => {\r\n    let top_left_lon = parseFloat(gridProps.longitude);\r\n    let top_left_lat = parseFloat(gridProps.latitude);\r\n    let rotation = parseFloat(gridProps.rotation);\r\n    let userPrj = gridProps.projection;\r\n    let cell_size = parseFloat(gridProps.cellSize);\r\n    let nrows = parseFloat(gridProps.nrows);\r\n    let ncols = parseFloat(gridProps.ncols);\r\n\r\n    const webMercator = proj4.defs(\"EPSG:4326\");\r\n    let EARTH_RADIUS_M = 6.371e6;\r\n    let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\r\n    let bearing = (90 - rotation + 360) % 360;\r\n    let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\r\n    let la1 = deg_to_rad(top_left_lon_lat.lat);\r\n    let lo1 = deg_to_rad(top_left_lon_lat.lon);\r\n    let bearing_rad = deg_to_rad(bearing);\r\n    let la2 = Math.asin(\r\n        Math.sin(la1) * Math.cos(Ad) +\r\n        Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\r\n    );\r\n    let lo2 =\r\n        lo1 +\r\n        Math.atan2(\r\n            Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\r\n            Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\r\n        );\r\n    let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\r\n    let top_left_xy = proj4(webMercator, userPrj, [\r\n        top_left_lon_lat.lon,\r\n        top_left_lon_lat.lat,\r\n    ]);\r\n\r\n    let top_right_xy = proj4(webMercator, userPrj, [\r\n        top_right_lon_lat.lon,\r\n        top_right_lon_lat.lat,\r\n    ]);\r\n\r\n    let dydx =\r\n        (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\r\n    let theta = Math.atan(dydx);\r\n    let cosTheta = Math.cos(theta);\r\n    let sinTheta = Math.sin(theta);\r\n    // create rotate matrix\r\n    let x_unRot = [];\r\n    let y_unRot = [];\r\n    for (let i = 0; i < nrows; i++) {\r\n        for (let j = 0; j < ncols; j++) {\r\n            x_unRot.push(j * cell_size);\r\n            y_unRot.push(-i * cell_size);\r\n        }\r\n    }\r\n\r\n    let x_rot = [];\r\n    let y_rot = [];\r\n    for (let i = 0; i < x_unRot.length; i++) {\r\n        x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\r\n        y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\r\n    }\r\n\r\n    let x_rot_trans = [];\r\n    let y_rot_trans = [];\r\n    for (let i = 0; i < x_rot.length; i++) {\r\n        x_rot_trans.push(top_left_xy[0] + x_rot[i]);\r\n        y_rot_trans.push(top_left_xy[1] + y_rot[i]);\r\n    }\r\n\r\n    var dxdCol = x_rot_trans[1] - x_rot_trans[0];\r\n    var dydCol = y_rot_trans[1] - y_rot_trans[0];\r\n    var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\r\n    var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\r\n\r\n    let gridPnts = [];\r\n    let geojsonFeatureCollection = {\r\n        type: \"FeatureCollection\",\r\n        // polygons go here\r\n        features: [],\r\n    };\r\n\r\n    // get a list of types that is updated based on\r\n    // the current redux state of the types list table\r\n    let types = typesList;\r\n\r\n    for (let i = 0; i < x_rot_trans.length; i++) {\r\n        let rndType = randomProperty(types);\r\n        let geojsonPolygon = {\r\n            type: \"Feature\",\r\n            geometry: {\r\n                type: \"Polygon\",\r\n                coordinates: null,\r\n            },\r\n            properties: {\r\n                color: _hexToRgb(rndType.color),\r\n                height: rndType.height,\r\n                name: rndType.name,\r\n                interactive: rndType.interactive,\r\n                id: i,\r\n            },\r\n        };\r\n\r\n        var polygon_xy = [\r\n            [x_rot_trans[i], y_rot_trans[i]],\r\n            [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\r\n            [\r\n                x_rot_trans[i] + dxdRow + dxdCol,\r\n                y_rot_trans[i] + dydRow + dydCol,\r\n            ],\r\n            [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\r\n            [x_rot_trans[i], y_rot_trans[i]],\r\n        ];\r\n\r\n        var polygon_ll = [];\r\n        for (var v = 0; v < 5; v++) {\r\n            let ll = proj4(userPrj, webMercator, polygon_xy[v]);\r\n\r\n            polygon_ll.push(ll);\r\n        }\r\n\r\n        geojsonPolygon.geometry.coordinates = [polygon_ll];\r\n        gridPnts.push(geojsonPolygon);\r\n    }\r\n    geojsonFeatureCollection.features = gridPnts;\r\n    // joinGridAndPrivateGeojson(scenario, geojsonFeatureCollection, types);\r\n    // convertScenarioToWGS84(types);\r\n    return geojsonFeatureCollection;\r\n};\r\n","import React from \"react\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { gridCreator } from \"./gridCreator\";\r\nimport { listenToGridCreator } from \"../../../../../redux/actions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function GridMaker(props) {\r\n    const dispatch = useDispatch();\r\n    const reduxState = useSelector((state) => state);\r\n\r\n    const handleGridCreation = () => {\r\n        let grid = gridCreator(props.gridProps, reduxState.TYPES_LIST);\r\n        dispatch(listenToGridCreator(grid));\r\n    };\r\n\r\n    return (\r\n        <Button\r\n            onClick={() => {\r\n                handleGridCreation();\r\n            }}\r\n            variant=\"outlined\"\r\n            color=\"default\"\r\n            startIcon={<AppsIcon />}\r\n        >\r\n            Create Grid\r\n        </Button>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload'\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload'\r\nimport axios from 'axios'\r\nimport settings from '../../../../../settings/GridEditorSettings.json'\r\nimport globalSettings from '../../../../../settings/settings.json'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { useSelector } from 'react-redux'\r\nimport Link from '@material-ui/core/Link'\r\nimport scenario from '../../../../../settings/settings.json'\r\n\r\nconst reqResonseUI = (response, tableName) => {\r\n  let cityscopeJSendpoint =\r\n    'https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=' + tableName\r\n  // create the feedback text\r\n  let resText = (\r\n    <Typography color=\"textPrimary\" variant=\"caption\">\r\n      CityIO is {response.data.status}. Grid deployed to{' '}\r\n      <Link color=\"textSecondary\" href={cityscopeJSendpoint}>\r\n        {cityscopeJSendpoint}\r\n      </Link>\r\n    </Typography>\r\n  )\r\n\r\n  return resText\r\n}\r\n\r\n/**\r\n *\r\n * @param {typesList} typesList List of types form table editor\r\n *\r\n */\r\nconst makeGEOGRIDobject = (struct, typesList, geoJsonFeatures, gridProps) => {\r\n  let GEOGRID_object = struct\r\n\r\n  // take types list and prepare to csJS format\r\n  let newTypesList = {}\r\n\r\n  typesList.forEach((oldType) => {\r\n    newTypesList[oldType.name] = oldType\r\n    //material-table creates strings for these items\r\n    // so in first \"Commit to cityIO\", these must be turned into\r\n    // Json objects. On Second commit, these are already objects,\r\n    // hence the two conditions below\r\n\r\n    newTypesList[oldType.name].LBCS =\r\n      typeof oldType.LBCS == 'string' ? JSON.parse(oldType.LBCS) : oldType.LBCS\r\n    newTypesList[oldType.name].NAICS =\r\n      typeof oldType.NAICS == 'string'\r\n        ? JSON.parse(oldType.NAICS)\r\n        : oldType.NAICS\r\n  })\r\n\r\n  GEOGRID_object.properties.types = newTypesList\r\n\r\n  // inject table props to grid\r\n  GEOGRID_object.properties.header = gridProps\r\n  GEOGRID_object.properties.header.longitude = parseFloat(\r\n    GEOGRID_object.properties.header.longitude,\r\n  )\r\n  GEOGRID_object.properties.header.latitude = parseFloat(\r\n    GEOGRID_object.properties.header.latitude,\r\n  )\r\n  GEOGRID_object.properties.header.rotation = parseFloat(\r\n    GEOGRID_object.properties.header.rotation,\r\n  )\r\n  GEOGRID_object.properties.header.nrows = parseFloat(\r\n    GEOGRID_object.properties.header.nrows,\r\n  )\r\n  GEOGRID_object.properties.header.ncols = parseFloat(\r\n    GEOGRID_object.properties.header.ncols,\r\n  )\r\n  GEOGRID_object.properties.header.cellSize = parseFloat(\r\n    GEOGRID_object.properties.header.cellSize,\r\n  )\r\n\r\n  // lastly get the grid features\r\n  GEOGRID_object.features = geoJsonFeatures\r\n  return GEOGRID_object\r\n}\r\n\r\n/**\r\n *\r\n * @param {typesList} typesList List of types form table editor\r\n *\r\n */\r\nconst makeGEOGRIDDATAobject = (geoJsonFeatures) => {\r\n  let GEOGRIDDATA_object = []\r\n  geoJsonFeatures.forEach((element) => {\r\n    GEOGRIDDATA_object.push(element.properties)\r\n  })\r\n  return GEOGRIDDATA_object\r\n}\r\n\r\nexport default function CommitGrid(props) {\r\n  const [reqResonse, setReqResonse] = React.useState(null)\r\n\r\n  const reduxState = useSelector((state) => state)\r\n  const hasGrid = reduxState.GRID_CREATED\r\n\r\n  const downloadObjectAsJson = () => {\r\n    let GEOGRIDstruct = settings.GEOGRID\r\n\r\n    let typesList = reduxState.TYPES_LIST\r\n    let geoJsonFeatures = reduxState.GRID_CREATED.features\r\n    let gridProps = props.gridProps\r\n    let GEOGRID_object = makeGEOGRIDobject(\r\n      GEOGRIDstruct,\r\n      typesList,\r\n      geoJsonFeatures,\r\n      gridProps,\r\n    )\r\n    var dataStr =\r\n      'data:text/json;charset=utf-8,' +\r\n      encodeURIComponent(JSON.stringify(GEOGRID_object))\r\n    var downloadAnchorNode = document.createElement('a')\r\n    downloadAnchorNode.setAttribute('href', dataStr)\r\n    downloadAnchorNode.setAttribute('download', 'grid.json')\r\n    document.body.appendChild(downloadAnchorNode) // required for firefox\r\n    downloadAnchorNode.click()\r\n    downloadAnchorNode.remove()\r\n  }\r\n\r\n  const postGridToCityIO = () => {\r\n    let GEOGRIDstruct = settings.GEOGRID\r\n    let typesList = reduxState.TYPES_LIST\r\n    // let geoJsonFeatures = reduxState.GRID_CREATED.features\r\n    let geoJsonFeatures = scenario.features\r\n    let gridProps = props.gridProps\r\n    // take grid struct from settings\r\n    // console.log('GEOGRIDstruct', GEOGRIDstruct);\r\n    // console.log('typesList', typesList);\r\n    // console.log('geoJsonFeatures', geoJsonFeatures);\r\n    // console.log('gridProps', gridProps);\r\n    let GEOGRID_object = makeGEOGRIDobject(\r\n      GEOGRIDstruct,\r\n      typesList,\r\n      geoJsonFeatures,\r\n      gridProps,\r\n    )\r\n\r\n    let GEOGRIDDATA_object = makeGEOGRIDDATAobject(geoJsonFeatures)\r\n    let tableName = GEOGRID_object.properties.header.tableName.toLowerCase()\r\n\r\n    const geoGridOptions = (URL, DATA) => {\r\n      return {\r\n        method: 'post',\r\n        url: URL,\r\n        data: DATA,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n        },\r\n      }\r\n    }\r\n\r\n    const table_url = `${globalSettings.cityIO.baseURL}${tableName}/`\r\n    const new_table_grid = {\r\n      GEOGRID: GEOGRID_object,\r\n      GEOGRIDDATA: GEOGRIDDATA_object,\r\n    }\r\n\r\n    axios(geoGridOptions(table_url, new_table_grid))\r\n      .then(function (response) {\r\n        setReqResonse(reqResonseUI(response, tableName))\r\n      })\r\n      .catch((error) => console.log(`ERROR: ${error}`))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {hasGrid && (\r\n        <>\r\n          <Button\r\n            onClick={() => {\r\n              postGridToCityIO()\r\n            }}\r\n            variant=\"outlined\"\r\n            color=\"default\"\r\n            startIcon={<CloudUploadIcon />}\r\n          >\r\n            Commit Grid to cityIO\r\n          </Button>\r\n\r\n          <Button\r\n            onClick={() => {\r\n              // ! download as json\r\n              downloadObjectAsJson()\r\n            }}\r\n            variant=\"outlined\"\r\n            color=\"default\"\r\n            startIcon={<CloudDownloadIcon />}\r\n          >\r\n            Download JSON\r\n          </Button>\r\n\r\n          <div style={{ width: '100%' }}> {reqResonse}</div>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CenterFocusStrongIcon from \"@material-ui/icons/CenterFocusStrong\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { listenToBaseMapCenter } from \"../../../../../redux/actions\";\r\n\r\nexport default function CenterMapButton(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Button\r\n            onClick={() => {\r\n                dispatch(\r\n                    listenToBaseMapCenter({\r\n                        latCenter: parseFloat(props.mapCenter[0]),\r\n                        lonCenter: parseFloat(props.mapCenter[1]),\r\n                    })\r\n                );\r\n            }}\r\n            variant=\"outlined\"\r\n            color=\"default\"\r\n            startIcon={<CenterFocusStrongIcon />}\r\n            style={{ fontSize: \"12px\" }}\r\n        >\r\n            Center Map\r\n        </Button>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport GridMaker from \"./GridMaker\";\r\nimport CommitGrid from \"./CommitGrid\";\r\nimport CenterMapButton from \"./CenterMapButton/CenterMapButton\";\r\nimport settings from \"../../../../settings/GridEditorSettings.json\";\r\n\r\n\r\nexport default function GridProps() {\r\n    const useStyles = makeStyles((theme) => ({\r\n        notchedOutline: {\r\n            borderWidth: \"1px\",\r\n            borderColor: theme.palette.text.secondary,\r\n        },\r\n        root: {\r\n            \"& .MuiTextField-root\": {\r\n                margin: theme.spacing(1),\r\n                flexWrap: \"wrap\",\r\n            },\r\n            \"& > *\": {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n    }));\r\n\r\n    const [formValues, setformValues] = React.useState({\r\n        // tableName: \"CityScopeJS\",\r\n        tableName: settings.map.projectName,\r\n        latitude: settings.GEOGRID.properties.header.latitude,\r\n        longitude: settings.GEOGRID.properties.header.longitude,\r\n        tz:settings.GEOGRID.properties.header.tz, \r\n        nrows: settings.GEOGRID.properties.header.nrows,\r\n        ncols: settings.GEOGRID.properties.header.nrows,\r\n        rotation: settings.GEOGRID.properties.header.rotation,\r\n        cellSize: settings.GEOGRID.properties.header.cellSize,\r\n        projection: settings.GEOGRID.properties.header.projection,\r\n    });\r\n\r\n    const handleChangeForm = (event) => {\r\n        const { id, value } = event.target;\r\n        setformValues({ ...formValues, [id]: value });\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    //  get all data\r\n    // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\r\n    return (\r\n        <form className={classes.root} noValidate autoComplete=\"off\">\r\n            <Typography variant=\"h2\">Grid Properties</Typography>\r\n            <div className={classes.root}>\r\n                <TextField\r\n                    InputProps={{\r\n                        classes: {\r\n                            notchedOutline: classes.notchedOutline,\r\n                        },\r\n                    }}\r\n                    onChange={(event) => handleChangeForm(event)}\r\n                    variant=\"outlined\"\r\n                    className={classes.textField}\r\n                    id=\"tableName\"\r\n                    label=\"CityScope Project Name\"\r\n                    defaultValue={formValues.tableName}\r\n                />\r\n            </div>\r\n            <div className={classes.root}>\r\n                <TextField\r\n                    InputProps={{\r\n                        classes: {\r\n                            notchedOutline: classes.notchedOutline,\r\n                        },\r\n                    }}\r\n                    onChange={(event) => handleChangeForm(event)}\r\n                    variant=\"outlined\"\r\n                    className={classes.textField}\r\n                    id=\"latitude\"\r\n                    label=\"Latitude\"\r\n                    defaultValue={formValues.latitude}\r\n                    type=\"number\"\r\n                />\r\n\r\n                <TextField\r\n                    InputProps={{\r\n                        classes: {\r\n                            notchedOutline: classes.notchedOutline,\r\n                        },\r\n                    }}\r\n                    onChange={(event) => handleChangeForm(event)}\r\n                    variant=\"outlined\"\r\n                    className={classes.textField}\r\n                    id=\"longitude\"\r\n                    label=\"Longitude\"\r\n                    defaultValue={formValues.longitude}\r\n                    type=\"number\"\r\n                />\r\n                <TextField\r\n                    InputProps={{\r\n                        classes: {\r\n                            notchedOutline: classes.notchedOutline,\r\n                        },\r\n                    }}\r\n                    onChange={(event) => handleChangeForm(event)}\r\n                    variant=\"outlined\"\r\n                    className={classes.textField}\r\n                    id=\"tz\"\r\n                    label=\"Time Zone (GMT)\"\r\n                    defaultValue={formValues.tz}\r\n                    type=\"number\"\r\n                />\r\n            </div>\r\n            <div className={classes.root}>\r\n                <CenterMapButton\r\n                    mapCenter={[formValues.latitude, formValues.longitude]}\r\n                />\r\n            </div>\r\n            <div className={classes.root}>\r\n                <TextField\r\n                    onChange={(event) => handleChangeForm(event)}\r\n                    variant=\"outlined\"\r\n                    className={classes.textField}\r\n                    id=\"nrows\"\r\n                    label=\"Rows\"\r\n                    defaultValue={formValues.nrows}\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                        classes: {\r\n                            notchedOutline: classes.notchedOutline,\r\n                        },\r\n                        inputProps: {\r\n                            max: 100,\r\n                            min: 0,\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <TextField\r\n                    onChange={(event) => handleChangeForm(event)}\r\n                    variant=\"outlined\"\r\n                    className={classes.textField}\r\n                    id=\"ncols\"\r\n                    label=\"Columns\"\r\n                    defaultValue={formValues.ncols}\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                        classes: {\r\n                            notchedOutline: classes.notchedOutline,\r\n                        },\r\n                        inputProps: {\r\n                            max: 100,\r\n                            min: 0,\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <TextField\r\n                    onChange={(event) => handleChangeForm(event)}\r\n                    variant=\"outlined\"\r\n                    className={classes.textField}\r\n                    id=\"rotation\"\r\n                    label=\"Rotation (deg)\"\r\n                    defaultValue={formValues.rotation}\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                        classes: {\r\n                            notchedOutline: classes.notchedOutline,\r\n                        },\r\n                        inputProps: {\r\n                            max: 360,\r\n                            min: 0,\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <TextField\r\n                    onChange={(event) => handleChangeForm(event)}\r\n                    variant=\"outlined\"\r\n                    className={classes.textField}\r\n                    id=\"cellSize\"\r\n                    label=\"Cell Size (m^2)\"\r\n                    defaultValue={formValues.cellSize}\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                        classes: {\r\n                            notchedOutline: classes.notchedOutline,\r\n                        },\r\n                        inputProps: {\r\n                            max: 1000,\r\n                            min: 0,\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className={classes.root}>\r\n                <TextField\r\n                    InputProps={{\r\n                        classes: {\r\n                            notchedOutline: classes.notchedOutline,\r\n                        },\r\n                    }}\r\n                    onChange={(event) => handleChangeForm(event)}\r\n                    variant=\"outlined\"\r\n                    id=\"projection\"\r\n                    label=\"Projection\"\r\n                    defaultValue={formValues.projection}\r\n                    type=\"string\"\r\n                    helperText=\"Default projection should work for most CityScope cases. Find specific projections at: https://epsg.io/\"\r\n                />\r\n            </div>\r\n            <div className={classes.root}>\r\n                <GridMaker gridProps={formValues} />\r\n                <CommitGrid gridProps={formValues} />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n","// // export default EditMenuMain;\r\n\r\nimport TypesEditor from './TypesEditor'\r\nimport GridProps from './GridProps'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nexport default function EditorMenu() {\r\n  return (\r\n    <List>\r\n      <ListItem>\r\n        <Typography variant=\"h1\">CityScope Grid Editor</Typography>\r\n      </ListItem>\r\n      <ListItem>\r\n        <Typography>\r\n          This tool is for creating CityScope projects with virtual editable\r\n          girds, types, and props, and deploy them to cityIO.\r\n        </Typography>\r\n      </ListItem>\r\n      <ListItem>\r\n        <GridProps />\r\n      </ListItem>\r\n      <ListItem>\r\n        <TypesEditor />\r\n      </ListItem>\r\n    </List>\r\n  )\r\n}\r\n","import EditorMap from \"./EditorMap/EditorMap\";\r\nimport EditorMenu from \"./EditorMenu\";\r\nimport {\r\n    makeStyles,\r\n    Grid,\r\n    Card,\r\n    CardContent,\r\n    Container,\r\n} from \"@material-ui/core\";\r\nimport Page from \"../../layouts/Page\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: \"auto\",\r\n        height: \"100%\",\r\n        paddingBottom: theme.spacing(3),\r\n        paddingTop: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nexport default function GridEditor() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Page className={classes.root} title=\"Editor\">\r\n            <Container maxWidth={false}>\r\n                <>\r\n                    <Grid container spacing={5}>\r\n                        <Grid item xs={12} l={6} md={6} xl={4}>\r\n                            <Card\r\n                                elevation={15}\r\n                                style={{\r\n                                    maxHeight: \"85vh\",\r\n                                    overflow: \"auto\",\r\n                                }}\r\n                            >\r\n                                <CardContent>\r\n                                    <EditorMenu />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={12} l={6} md={6} xl={8}>\r\n                            <Card\r\n                                elevation={15}\r\n                                style={{\r\n                                    height: \"85vh\",\r\n                                    width: \"100%\",\r\n                                    position: \"relative\",\r\n                                }}\r\n                            >\r\n                                <CardContent>\r\n                                    <EditorMap />\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            </Container>\r\n        </Page>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport settings from \"../../../settings/settings.json\";\r\n\r\nexport const getScenarioIndices = (\r\n    tableName,\r\n    setScenarioNames,\r\n    setLoadingState\r\n) => {\r\n    var url = `${settings.cityIO.baseURL}${tableName}/meta/hashes`;\r\n    axios\r\n        .get(url)\r\n        .then((res) => {\r\n            const metaDataKeys = Object.keys(res.data);\r\n            const scenarioIndices = metaDataKeys\r\n                .filter((str) => str.includes(\"scenarios\"))\r\n                .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\r\n            const promises = [];\r\n            for (const id of scenarioIndices) {\r\n                promises.push(getScenarioName(tableName, id));\r\n            }\r\n            Promise.all(promises)\r\n                .then((res) => {\r\n                    setScenarioNames(\r\n                        res.map((r) => ({\r\n                            name: r.data.name,\r\n                            id: r.data.id,\r\n                        }))\r\n                    );\r\n                    setLoadingState && setLoadingState(false);\r\n                })\r\n                .catch((err) =>\r\n                    console.log(\"error getting scenario names\", err)\r\n                );\r\n        })\r\n        .catch((err) => {\r\n            console.log(\"Error getting scenarios\", err);\r\n        });\r\n};\r\n\r\nexport const getScenarioName = (tableName, id) => {\r\n    const url =\r\n\t\t`${settings.cityIO.baseURL}${tableName}/scenarios${id}/info/`;\r\n    return axios.get(url);\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getCityioData,\r\n    setReadyState,\r\n    setLoadingState,\r\n    setScenarioNames,\r\n    addLoadingModules,\r\n    removeLoadingModules,\r\n} from \"../../../redux/actions\";\r\nimport settings from \"../../../settings/settings.json\";\r\nimport { getScenarioIndices } from \"./utils\";\r\n\r\nconst getAPICall = async (URL) => {\r\n    try {\r\n        // ! should add 'retry' here\r\n        // ! https://stackoverflow.com/questions/56074531/how-to-retry-5xx-requests-using-axios\r\n        const response = await axios.get(URL);\r\n        return response.data;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nexport default function CityIO(props) {\r\n    const { tableName } = props;\r\n    const [hashId, setHashId] = useState(null);\r\n    const [hashes, setHashes] = useState({});\r\n    const cityioURL = `${settings.cityIO.baseURL}${tableName}/`;\r\n    const cityioData = useSelector((state) => state.CITYIO);\r\n    console.log('cityioData',cityioData);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /**\r\n     * start fetching API hashes to check for new data\r\n     */\r\n    useEffect(() => {\r\n        const timer = setTimeout(update, settings.cityIO.interval);\r\n        console.log(\"reading cityIO every\" + settings.cityIO.interval + \"ms\");\r\n        return () => clearTimeout(timer);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    async function update() {\r\n        // recursively get hashes\r\n        const newHashId = await getAPICall(cityioURL + \"meta/id/\");\r\n        if (hashId !== newHashId) {\r\n            setHashId(newHashId);\r\n        }\r\n        setTimeout(update, settings.cityIO.interval);\r\n    }\r\n\r\n    async function getModules() {\r\n        const newHashes = await getAPICall(cityioURL + \"meta/hashes/\");\r\n        const promises = [];\r\n        const loadingModules = [];\r\n        const pickedModules = settings.cityIO.cityIOmodules.map((x) => x.name);\r\n        // for each of the modules in settings, add api call to promises\r\n        pickedModules.forEach((module) => {\r\n            if (hashes[module] !== newHashes[module]) {\r\n                promises.push(getAPICall(`${cityioURL}${module}/`));\r\n                loadingModules.push(module);\r\n            } else {\r\n                promises.push(null);\r\n            }\r\n        });\r\n        dispatch(addLoadingModules(loadingModules));\r\n        const modules = await Promise.all(promises);\r\n        setHashes(newHashes);\r\n\r\n        // update cityio object with modules data\r\n        const modulesData = pickedModules.reduce((obj, k, i) => {\r\n            if (modules[i]) {\r\n                console.log(`updating ${k}`);\r\n                return { ...obj, [k]: modules[i] };\r\n            } else {\r\n                return obj;\r\n            }\r\n        }, cityioData);\r\n        modulesData.tableName = tableName;\r\n\r\n        dispatch(removeLoadingModules(loadingModules));\r\n\r\n        // send to cityio\r\n        dispatch(getCityioData(modulesData));\r\n        console.log(\"done updating from cityIO\");\r\n\r\n        // initializes rendering of Menu and Map containers\r\n        dispatch(setReadyState(true));\r\n        dispatch(setLoadingState(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        //! only update if hashId changes\r\n        if (!hashId) {\r\n            return;\r\n        }\r\n        // reset the state of loading flag\r\n        dispatch(setLoadingState(true));\r\n        // set Scenario Names and Ids\r\n        getScenarioIndices(tableName, (data) =>\r\n            dispatch(setScenarioNames(data))\r\n        );\r\n        getModules();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [hashId]);\r\n\r\n    return null;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/legoio.148c5ab6.png\";","import { Typography, Link, Card, CardContent } from '@material-ui/core'\r\n\r\nexport default function SelectedTable(props) {\r\n  const clicked = props.clicked\r\n  const cityscopeJSendpoint =\r\n    'https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope='\r\n\r\n\t// 'http://localhost:3000/CS_cityscopeJS/?cityscope='\r\n\t\r\nconsole.log(clicked.object);\r\n\r\n  return (\r\n    <Card\r\n      elevation={15}\r\n      style={{\r\n        position: 'relative',\r\n        zIndex: 100,\r\n      }}\r\n    >\r\n      <CardContent>\r\n        <Typography variant=\"h2\" color=\"textPrimary\">\r\n          CityScope {clicked.object.tableName}\r\n        </Typography>\r\n        <Typography>\r\n          <Link\r\n            color={'secondary'}\r\n            href={cityscopeJSendpoint + clicked.object.tableName.toLowerCase()}\r\n          >\r\n            Go to project\r\n          </Link>{' '}\r\n          or{' '}\r\n          <Link\r\n            target={'blank'}\r\n            color={'secondary'}\r\n            href={clicked.object.tableURL}\r\n          >\r\n            view raw data on cityIO.\r\n          </Link>\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { _MapContext } from 'react-map-gl'\r\nimport { DeckGL } from '@deck.gl/react'\r\nimport { _GlobeView as GlobeView, COORDINATE_SYSTEM } from '@deck.gl/core'\r\nimport { TileLayer } from '@deck.gl/geo-layers'\r\nimport { FlyToInterpolator } from 'deck.gl'\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\nimport { LineLayer, IconLayer, TextLayer, BitmapLayer, GeoJsonLayer } from '@deck.gl/layers'\r\nimport icon from './legoio.png'\r\n\r\nimport SelectedTable from './SelectedTable'\r\n\r\n// * draggable pin https://github.com/visgl/react-map-gl/tree/6.1-release/examples/draggable-markers\r\n\r\nexport default function CityIOdeckGLmap(props) {\r\n  const [markerInfo, setMarkerInfo] = useState([])\r\n  const [clicked, setClicked] = useState()\r\n  const [zoom, setZoom] = useState()\r\n  const INIT_VIEW = {\r\n    longitude: -71.060929,\r\n    latitude: 42.3545259,\r\n    zoom: 1,\r\n    pitch: 0,\r\n    bearing: 0,\r\n    zHeight: 2000000,\r\n  }\r\n\r\n  const [viewport, setViewport] = useState(INIT_VIEW)\r\n  const [initialViewState, setInitialViewState] = useState(viewport)\r\n  // boolean for hovering flag\r\n  let isHovering = false\r\n\r\n  useEffect(() => {\r\n    // set initial zoom level to refelct layers appearance\r\n    setZoom(INIT_VIEW.zoom)\r\n    document\r\n      .getElementById('deckgl-wrapper')\r\n      .addEventListener('contextmenu', (evt) => evt.preventDefault())\r\n  }, [INIT_VIEW.zoom])\r\n\r\n  useEffect(() => {\r\n    let markersArr = []\r\n    props.cityIOdata.forEach((table, index) => {\r\n      const RND_1 = Math.random() * 10\r\n      const RND_2 = Math.random() * 10\r\n      markersArr.push({\r\n        tableURL: table.tableURL,\r\n        tableName: table.tableName,\r\n        index: index,\r\n        tableHeader: table.tableHeader,\r\n        coord: {\r\n          from: [table.tableHeader.longitude, table.tableHeader.latitude],\r\n          to: [\r\n            table.tableHeader.longitude + RND_1,\r\n            table.tableHeader.latitude + RND_2,\r\n            INIT_VIEW.zHeight,\r\n          ],\r\n        },\r\n      })\r\n    })\r\n    setMarkerInfo(markersArr)\r\n  }, [props, INIT_VIEW.zHeight])\r\n\r\n  const layers = [\r\n    new TileLayer({\r\n      data:\r\n        'https://basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png',\r\n        // 'https://sqhkt-qlqh.tphcm.gov.vn/api/tiles/bandoso/{z}/{x}/{y}',\r\n\r\n      /**\r\n       * \r\n       * TESTS WITH OTHER TILESETS  \r\n       * 'https://api.mapbox.com/v4/mapbox.mapbox-streets-v8/{z}/{x}/{y}.png' +\r\n      '?style=' +\r\n      'mapbox://styles/mapbox/dark-v10' +\r\n      'mapbox://styles/relnox/ck0h5xn701bpr1dqs3he2lecq' +\r\n      'mapbox://styles/relnox/cjs9rb33k2pix1fo833uweyjd' +\r\n      '&access_token=' +\r\n      process.env.REACT_APP_MAPBOX_TOKEN,\r\n\r\n     settings.map.mapStyle.sat,\r\n       'https://c.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n       */\r\n\r\n      minZoom: 0,\r\n      maxZoom: 19,\r\n      tileSize: 96,\r\n\r\n      renderSubLayers: (props) => {\r\n        const {\r\n          bbox: { west, south, east, north },\r\n        } = props.tile\r\n\r\n        return new BitmapLayer(props, {\r\n          data: null,\r\n          image: props.data,\r\n          _imageCoordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\r\n          bounds: [west, south, east, north],\r\n        })\r\n      },\r\n    }),\r\n\r\n    new LineLayer({\r\n      id: 'LineLayer',\r\n      data: markerInfo,\r\n      pickable: true,\r\n      getWidth: zoom < 2 ? 2 : 0,\r\n      getSourcePosition: (d) => d.coord.from,\r\n      getTargetPosition: (d) => d.coord.to,\r\n      getColor: (d) => [255, 82, 120],\r\n    }),\r\n    new TextLayer({\r\n      id: 'text-layer',\r\n      data: markerInfo,\r\n      pickable: true,\r\n      getPosition: (d) => d.coord.to,\r\n      getText: (d) => d.tableName,\r\n      getColor: [255, 82, 120],\r\n      getSize: zoom < 2 ? 0 : 5,\r\n      getAngle: 0,\r\n      getPixelOffset: [10, 5],\r\n      getTextAnchor: 'start',\r\n      getAlignmentBaseline: 'center',\r\n    }),\r\n    new IconLayer({\r\n      id: 'icon-layer',\r\n      data: markerInfo,\r\n      pickable: true,\r\n      iconAtlas: icon,\r\n      onClick: (d) => {\r\n        setInitialViewState({\r\n          longitude: d.object.coord.to[0],\r\n          latitude: d.object.coord.to[1],\r\n          zoom: 3,\r\n          pitch: 0,\r\n          bearing: 0,\r\n          transitionDuration: 1000,\r\n          transitionInterpolator: new FlyToInterpolator(),\r\n        })\r\n\r\n        setClicked(d)\r\n      },\r\n      iconMapping: {\r\n        marker: { x: 0, y: 0, width: 768, height: 768, mask: false },\r\n      },\r\n      getIcon: (d) => 'marker',\r\n      sizeScale: 1,\r\n      getSize: zoom < 5 ? 30 : 15,\r\n      getPosition: (d) => [d.coord.to[0], d.coord.to[1], INIT_VIEW.zHeight],\r\n    }),\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      {clicked && clicked.object && <SelectedTable clicked={clicked} />}\r\n\r\n      <DeckGL\r\n        views={new GlobeView()}\r\n        onHover={({ object }) => (isHovering = Boolean(object))}\r\n        getCursor={({ isDragging }) =>\r\n          isDragging ? 'grabbing' : isHovering ? 'crosshair' : 'grab'\r\n        }\r\n        layers={layers}\r\n        controller={true}\r\n        initialViewState={initialViewState}\r\n        onViewportChange={setViewport}\r\n        onViewStateChange={(d) => setZoom(d.viewState.zoom)}\r\n        ContextProvider={_MapContext.Provider}\r\n      ></DeckGL>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport CityIOdeckGLmap from './CityIOdeckGLmap/index'\r\n\r\nimport axios from 'axios'\r\nimport settings from '../../settings/settings.json'\r\n\r\nexport default function CityIOlist() {\r\n  const [tableList, setTableList] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const fetchCityIOtables = async () => {\r\n    // ! https://stackoverflow.com/questions/37213783/waiting-for-all-promises-called-in-a-loop-to-finish\r\n    const cityIOlistURL = settings.cityIO.ListOfTables\r\n    // get all URLs\r\n    const tablesArr = await axios.get(cityIOlistURL)\r\n    // create array of all requests\r\n    const requestArr = tablesArr.data.map(async (tableName) => {\r\n      // const tableName = urlStr.split('/').pop()\r\n\t  const url = `${settings.cityIO.baseURL}${tableName}/`;\r\n      return axios\r\n        .get(`${url}GEOGRID/properties/header/`)\r\n        .then((res) =>\r\n          setTableList((oldArray) => [\r\n            ...oldArray,\r\n            { tableURL: url, tableName: tableName, tableHeader: res.data },\r\n          ]),\r\n        )\r\n        .catch((error) => console.log(error.toString()))\r\n    })\r\n\r\n    Promise.all(requestArr).then(() => {\r\n      return\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchCityIOtables().then(setIsLoading(false))\r\n  }, [])\r\n\r\n  return <>{!isLoading && <CityIOdeckGLmap cityIOdata={tableList} />}</>\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nexport default function GetGITdate() {\r\n  const [gitMeta, setGitMeta] = useState({\r\n    author: '',\r\n    branch: '',\r\n    date: '',\r\n    sha: '',\r\n    link: '',\r\n  })\r\n\r\n  const URL =\r\n    'https://api.github.com/repos/CityScope/CS_cityscopeJS/branches/master'\r\n\r\n  const fetchGitHub = () =>\r\n    fetch(URL)\r\n      .then((response) => {\r\n        response.json().then((json) => {\r\n          setGitMeta({\r\n            author: json.commit.commit.author.name,\r\n            date: json.commit.commit.author.date,\r\n            sha: json.commit.sha,\r\n          })\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  // run only once\r\n  useEffect(() => {\r\n    fetchGitHub()\r\n  }, [])\r\n\r\n  const gitMetaComp = (\r\n    <>\r\n      <Typography color={'primary'} variant={'h5'}>\r\n        CityScopeJS Development Tracking\r\n      </Typography>\r\n      <Typography color={'primary'}>\r\n        Author: {JSON.parse(JSON.stringify(gitMeta.author))}\r\n      </Typography>\r\n      <Typography color={'primary'}>\r\n        Date: {JSON.parse(JSON.stringify(gitMeta.date))}\r\n      </Typography>\r\n      <Typography color={'primary'}>\r\n        Hash: {JSON.parse(JSON.stringify(gitMeta.sha))}\r\n      </Typography>\r\n    </>\r\n  )\r\n\r\n  return gitMetaComp\r\n}\r\n","import {\r\n  Divider,\r\n  Typography,\r\n  makeStyles,\r\n  Card,\r\n  CardContent,\r\n  Link,\r\n} from '@material-ui/core'\r\nimport GitHubIcon from '@material-ui/icons/GitHub'\r\nimport GetGITdate from './GetGITdate'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  divider: {\r\n    margin: theme.spacing(2),\r\n  },\r\n}))\r\nexport default function SplashScreen() {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <>\r\n      <Card elevation={15}>\r\n        <CardContent>\r\n          <Typography color=\"textPrimary\" variant=\"h1\">\r\n            MIT CityScope\r\n          </Typography>\r\n\r\n          <Divider className={classes.divider} light />\r\n\r\n          <Typography color=\"textPrimary\" variant=\"h4\">\r\n            MIT CityScope is an open-source urban modeling and simulation\r\n            platform. CityScope allows users to examine different design\r\n            alternatives, and observe their impact through multiple layers of\r\n            urban analytics modules, such as traffic models, ABM simulation,\r\n            urban access, economy, storm-water, noise and more.\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Divider className={classes.divider} light />\r\n\r\n      <Card elevation={15}>\r\n        <CardContent position={'bottom'}>\r\n          <Typography color=\"textPrimary\" gutterBottom>\r\n            MIT CityScopeJS open-source project is developed by MIT, the City\r\n            Science Network, and contributers from all over the world.\r\n          </Typography>\r\n\r\n          <Typography>\r\n            <Link\r\n              color={'secondary'}\r\n              href={'https://github.com/CityScope'}\r\n              target={'blank'}\r\n            >\r\n              <GitHubIcon fontSize={'small'} /> Join the CityScope open-source\r\n              development\r\n            </Link>\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Divider className={classes.divider} light />\r\n\r\n      <Card elevation={15}>\r\n        <CardContent position={'bottom'}>\r\n          <Typography color=\"textPrimary\" gutterBottom>\r\n            Map view is provided via CityIO, CityScope server.\r\n          </Typography>\r\n          <Typography>\r\n            <Link\r\n              color={'secondary'}\r\n              href={'https://github.com/CityScope/CS_CityIO'}\r\n              target={'blank'}\r\n            >\r\n              <GitHubIcon fontSize={'small'} />{' '}\r\n              https://github.com/CityScope/CS_CityIO\r\n            </Link>\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Divider className={classes.divider} light />\r\n\r\n      <Card elevation={15}>\r\n        <CardContent position={'bottom'}>\r\n          <GetGITdate />\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n","import { makeStyles, Container } from '@material-ui/core'\r\nimport CityIOlist from './CityIOlist'\r\nimport Page from '../../layouts/Page'\r\nimport SplashScreen from './SplashScreen'\r\n\r\nexport default function CityIOviewer() {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: 'auto',\r\n        height: '100%',\r\n        padding: theme.spacing(3),\r\n      },\r\n    },\r\n    fixedPosition: {\r\n      position: 'relative',\r\n      zIndex: 100,\r\n    },\r\n  }))\r\n\r\n  const classes = useStyles()\r\n  return (\r\n    <>\r\n      <Page className={classes.root} title=\"CityScope Projects List\">\r\n        <div\r\n          style={{\r\n            height: '50vh',\r\n            width: '100%',\r\n            position: 'relative',\r\n          }}\r\n        >\r\n          <CityIOlist />\r\n        </div>\r\n\r\n        <Container className={classes.fixedPosition}>\r\n          <SplashScreen />\r\n        </Container>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n","import settings from \"../settings/settings.json\";\r\n\r\n/**\r\n * ! INIT STATE\r\n */\r\nconst listOfToggles = Object.keys(settings.menu.toggles);\r\nlet menuInitState = [];\r\nfor (let i = 0; i < listOfToggles.length; i++) {\r\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\r\n        menuInitState.push(listOfToggles[i]);\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    MENU: menuInitState,\r\n    CITYIO: {},\r\n    SCENARIO_NAMES: [],\r\n    MAP: {},\r\n    LOADING_MODULES: [],\r\n    SLIDERS: {\r\n        time: [\r\n            settings.map.layers.ABM.startSimHour,\r\n            settings.map.layers.ABM.currentSimHour,\r\n            settings.map.layers.ABM.endSimHour,\r\n        ],\r\n        speed: settings.map.layers.ABM.animationSpeed,\r\n    },\r\n    ABM_MODE: \"mode\",\r\n    ACCESS_TOGGLE: 0,\r\n    SELECTED_TYPE: null,\r\n    READY: false,\r\n    LOADING: false,\r\n    CURRENT_VIEW_OPTION: \"\",\r\n    /**\r\n     * ! EDITOR INIT STATE\r\n     */\r\n\r\n    ROW_EDIT: null,\r\n    BASE_MAP_CENTER: {\r\n        latCenter: null,\r\n        lonCenter: null,\r\n    },\r\n    TYPES_LIST: null,\r\n    GRID_CREATED: null,\r\n};\r\n\r\nexport default initialState;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Typography, Box } from \"@material-ui/core\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\n\r\nconst LoadingSpinner = () => {\r\n    const [loadingModules] = useSelector((state) => [state.LOADING_MODULES]);\r\n\r\n    return (\r\n        <>\r\n            {loadingModules.map((module, index) => {\r\n                return (\r\n                    <Box\r\n                        position=\"fixed\"\r\n                        bottom={index * 50}\r\n                        right=\"2vw\"\r\n                        width=\"10vw\"\r\n                        zIndex=\"101\"\r\n                        margin=\"0\"\r\n                        key={module}\r\n                    >\r\n                        <LinearProgress color={'secondary'} />\r\n                        <Typography\r\n                            variant=\"h6\"\r\n                            color=\"primary\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                        >\r\n                            {module}\r\n                        </Typography>\r\n                    </Box>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import {\r\n  GET_CITYIO_DATA,\r\n  MENU_INTERACTION,\r\n  LISTEN_TO_MAP_EVENTS,\r\n  LISTEN_TO_ABM_SLIDERS,\r\n  LISTEN_TO_EDIT_MENU,\r\n  SET_READY_STATE,\r\n  SET_LOADING_STATE,\r\n  SET_SCENARIO_NAMES,\r\n  LISTEN_TO_ACCESS_TOGGLE,\r\n  LISTEN_TO_ROW_EDIT,\r\n  LISTEN_TO_TYPES_LIST,\r\n  LISTEN_TO_GRID_CREATOR,\r\n  LISTEN_TO_BASE_MAP_CENTER,\r\n  LISTEN_TO_ABM_MODE,\r\n  ADD_LOADING_MODULES,\r\n  REMOVE_LOADING_MODULES,\r\n  SET_UI_WEBSOCKET_DATA,\r\n  SET_UI_WEBSOCKET_READY,\r\n  SET_CURRENT_VIEW_OPTION\r\n} from './actions'\r\nimport initialState from './initialState'\r\n\r\n/**\r\n * REDUCER\r\n */\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_CITYIO_DATA:\r\n      return { ...state, CITYIO: action.data }\r\n    case MENU_INTERACTION:\r\n      return { ...state, MENU: action.data }\r\n    case LISTEN_TO_MAP_EVENTS:\r\n      return { ...state, MAP: action.data }\r\n    case LISTEN_TO_ABM_SLIDERS:\r\n      return { ...state, SLIDERS: action.data }\r\n    case LISTEN_TO_ABM_MODE:\r\n      return { ...state, ABM_MODE: action.data }\r\n    case LISTEN_TO_ACCESS_TOGGLE:\r\n      return { ...state, ACCESS_TOGGLE: action.data }\r\n    case LISTEN_TO_EDIT_MENU:\r\n      return { ...state, SELECTED_TYPE: action.data }\r\n    case SET_READY_STATE:\r\n      return { ...state, READY: action.data }\r\n    case SET_LOADING_STATE:\r\n      return { ...state, LOADING: action.data }\r\n    case SET_SCENARIO_NAMES:\r\n      return { ...state, SCENARIO_NAMES: action.data }\r\n    case ADD_LOADING_MODULES:\r\n      return {\r\n        ...state,\r\n        LOADING_MODULES: [\r\n          ...new Set([...state.LOADING_MODULES, ...action.data]),\r\n        ],\r\n      }\r\n    case REMOVE_LOADING_MODULES:\r\n      return {\r\n        ...state,\r\n        LOADING_MODULES: state.LOADING_MODULES.filter(\r\n          (x) => !action.data.includes(x),\r\n        ),\r\n      }\r\n\r\n    /**\r\n     * PROJECTION MAPPING Actions\r\n     */\r\n    case SET_UI_WEBSOCKET_DATA:\r\n      return { ...state, UI_WEBSOCKET_DATA: action.data }\r\n\r\n    case SET_UI_WEBSOCKET_READY:\r\n      return { ...state, UI_WEBSOCKET_READY: action.data }\r\n\r\n    /**\r\n     * Editor Actions\r\n     */\r\n\r\n    case LISTEN_TO_ROW_EDIT:\r\n      return { ...state, ROW_EDIT: action.data }\r\n\r\n    case LISTEN_TO_TYPES_LIST:\r\n      return { ...state, TYPES_LIST: action.data }\r\n\r\n    case LISTEN_TO_GRID_CREATOR:\r\n      return { ...state, GRID_CREATED: action.data }\r\n\r\n    case LISTEN_TO_BASE_MAP_CENTER:\r\n      return { ...state, BASE_MAP_CENTER: action.data }\r\n    case SET_CURRENT_VIEW_OPTION:\r\n      console.log('action.data',action.data);\r\n      return { ...state, CURRENT_VIEW_OPTION: action.data }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst reduxDevTools =\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nconst configureStore = () => {\r\n    const store = createStore(reducer, reduxDevTools);\r\n\r\n    if (process.env.NODE_ENV !== \"production\") {\r\n        if (module.hot) {\r\n            module.hot.accept(\"./reducer\", () => {\r\n                store.replaceReducer(reducer);\r\n            });\r\n        }\r\n    }\r\n\r\n    return store;\r\n};\r\n\r\nconst store = configureStore();\r\n\r\nexport default store;\r\n","import axios from 'axios'\r\nimport { addLoadingModules } from '../redux/actions'\r\nimport store from '../redux/store'\r\nimport settings from '../settings/settings.json'\r\nimport { LightingEffect, AmbientLight, _SunLight } from '@deck.gl/core'\r\n\r\n/**\r\n * conver rgb to hex\r\n */\r\nexport function rgbToHex(r, g, b) {\r\n  function valToHex(c) {\r\n    var hex = c.toString(16)\r\n    return hex.length === 1 ? '0' + hex : hex\r\n  }\r\n  return '#' + valToHex(r) + valToHex(g) + valToHex(b)\r\n}\r\n\r\n/**\r\n * conver hex to rgb array\r\n */\r\nexport function hexToRgb(hex) {\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\r\n  return result\r\n    ? [\r\n        parseInt(result[1], 16),\r\n        parseInt(result[2], 16),\r\n        parseInt(result[3], 16),\r\n      ]\r\n    : null\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} hexString test if vaild 3->6 HEX color\r\n */\r\nexport const testHex = (hexString) => {\r\n  let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString)\r\n  return isHex\r\n}\r\n\r\n/**\r\n * Description. gets `props` with geojson\r\n * and procces the interactive area\r\n */\r\nexport const _proccessGridData = (cityioData) => {\r\n  // get the static grid\r\n  const GEOGRID = cityioData.GEOGRID\r\n  // if GEOGRRIDDATA exist and is the same length as our grid\r\n  if (\r\n    cityioData.GEOGRIDDATA &&\r\n    cityioData.GEOGRIDDATA.length === cityioData.GEOGRID.features.length\r\n  ) {\r\n    // get the grid data\r\n    const GEOGRIDDATA = cityioData.GEOGRIDDATA\r\n    // update GEOGRID features from GEOGRIDDATA on cityio\r\n    for (let i = 0; i < GEOGRID.features.length; i++) {\r\n      GEOGRID.features[i].properties = GEOGRIDDATA[i]\r\n\r\n      // inject id\r\n      GEOGRID.features[i].properties.id = i\r\n    }\r\n  }\r\n  const newGrid = JSON.parse(JSON.stringify(GEOGRID))\r\n  return newGrid\r\n}\r\n\r\n/**\r\n * Description. gets `props` with geojson\r\n * and procces the access layer data\r\n */\r\nexport const _proccessAccessData = (accessData) => {\r\n  // get colors from settings\r\n  let coordinates = accessData.features.map((d) => d.geometry.coordinates)\r\n  let values = accessData.features.map((d) => d.properties)\r\n  let heatmap = []\r\n  for (let i = 0; i < coordinates.length; i++) {\r\n    heatmap.push({\r\n      coordinates: coordinates[i],\r\n      values: values[i],\r\n    })\r\n  }\r\n  return heatmap\r\n}\r\n\r\n/**\r\n * checks if edits are done (toggled off)\r\n * than returns a redux state\r\n * with grid edits payload\r\n */\r\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\r\n  const expectUpdateModules = new Set(\r\n    settings.cityIO.cityIOmodules\r\n      .filter((val) => val.expectUpdate)\r\n      .map((val) => val.name),\r\n  )\r\n  const cityIOKeys = new Set(Object.keys(store.getState().CITYIO))\r\n\r\n  const loadingModules = [...cityIOKeys].filter((i) =>\r\n    expectUpdateModules.has(i),\r\n  )\r\n\r\n  let postURL = settings.cityIO.baseURL + tableName + endPoint\r\n\r\n  const options = {\r\n    method: 'post',\r\n    url: postURL,\r\n    data: data,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n    },\r\n  }\r\n  axios(options)\r\n    .then((res) => {\r\n      if (res.data.status === 'ok') {\r\n        store.dispatch(addLoadingModules(loadingModules))\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.log('ERROR:', error)\r\n    })\r\n}\r\n\r\n// /**\r\n//  * Description. uses deck api to\r\n//  * collect objects in a region\r\n//  * @argument{object} e  picking event\r\n//  */\r\nexport const _multipleObjPicked = (e, pickingRadius, deckGLRef) => {\r\n  const dim = pickingRadius\r\n  const x = e.x - dim / 2\r\n  const y = e.y - dim / 2\r\n  let multipleObj = deckGLRef.current.pickObjects({\r\n    x: x,\r\n    y: y,\r\n    width: dim,\r\n    height: dim,\r\n  })\r\n  return multipleObj\r\n}\r\n\r\n// /**\r\n//  * Description. allow only to pick cells that are\r\n//  *  not of CityScope TUI & that are interactable\r\n//  * so to not overlap TUI activity\r\n//  */\r\nexport const _handleGridcellEditing = (\r\n  e,\r\n  selectedType,\r\n  setSelectedCellsState,\r\n  pickingRadius,\r\n  deckGLRef,\r\n) => {\r\n  const { height, color, name } = selectedType\r\n  const multiSelectedObj = _multipleObjPicked(e, pickingRadius, deckGLRef)\r\n  multiSelectedObj.forEach((selected) => {\r\n    const thisCellProps = selected.object.properties\r\n    if (thisCellProps && thisCellProps.interactive) {\r\n      thisCellProps.color = testHex(color) ? hexToRgb(color) : color\r\n      thisCellProps.height = height\r\n      thisCellProps.name = name\r\n    }\r\n  })\r\n  setSelectedCellsState(multiSelectedObj)\r\n}\r\n\r\nvar currentDateMidnight = new Date()\r\n// set initial midnight to GMT 0\r\ncurrentDateMidnight.setHours(0, 0, 0, 0)\r\n\r\nexport const _setupSunEffects = (effectsRef, tableHeader) => {\r\n  // get time zone from the tz value if exist\r\n  if (tableHeader.tz) {\r\n    currentDateMidnight.setHours(tableHeader.tz, 0, 0, 0)\r\n  }\r\n  const ambientLight = new AmbientLight({\r\n    color: [255, 255, 255],\r\n    intensity: 0.85,\r\n  })\r\n  const dirLight = new _SunLight({\r\n    timestamp: 0,\r\n    color: [255, 255, 255],\r\n    intensity: 1.0,\r\n    _shadow: true,\r\n  })\r\n  const lightingEffect = new LightingEffect({ ambientLight, dirLight })\r\n  lightingEffect.shadowColor = [0, 0, 0, 0.5]\r\n  effectsRef.current = [lightingEffect]\r\n}\r\n\r\nexport const updateSunDirection = (time, effectsRef) => {\r\n  const thisLocationTime = currentDateMidnight.getTime() + time * 1000\r\n  var date = new Date(thisLocationTime)\r\n\r\n  effectsRef.current[0].directionalLights[0].timestamp = Date.UTC(\r\n    date.getFullYear(),\r\n    date.getMonth(),\r\n    date.getDay(),\r\n    date.getHours(),\r\n    date.getMinutes(),\r\n    date.getSeconds(),\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { RadialChart, Hint } from \"react-vis\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nexport default function TypeInfo(props) {\r\n    const COLOR_SCALE = [\"#85C4C8\", \"#C22E00\", \"#1E96BE\", \"#EC9370\", \"#F6D18A\"];\r\n\r\n    const radialRadius = 50;\r\n    const [hoveredRadial, setHoveredRadial] = useState(false);\r\n\r\n    // method to create data for radial chart\r\n    const careateData = () => {\r\n        // array for data\r\n        let data = [];\r\n        // check type info: if string, parse, else object\r\n        let info = props.typeInfo;\r\n        // get the type data\r\n        info.forEach((attr, index) => {\r\n            data.push({\r\n                angle: attr.proportion,\r\n                label: JSON.stringify(attr.use),\r\n                color: COLOR_SCALE[index],\r\n            });\r\n        });\r\n\r\n        return data;\r\n    };\r\n\r\n    const data = careateData();\r\n\r\n    /*\r\n    const boxStyle = { height: \"10px\", width: \"10px\" };\r\n\r\n    function buildValue(hoveredCell) {\r\n        const { radius, angle, angle0 } = hoveredCell;\r\n        const truedAngle = (angle + angle0) / 2;\r\n        return {\r\n            x: radius * Math.cos(truedAngle),\r\n            y: radius * Math.sin(truedAngle),\r\n        };\r\n    }\r\n    */\r\n\r\n    return (\r\n        <>\r\n            <RadialChart\r\n                colorType=\"literal\"\r\n                animation={true}\r\n                className={\"donut-chart-example\"}\r\n                innerRadius={radialRadius / 2 - radialRadius / 5}\r\n                radius={radialRadius / 2}\r\n                getLabel={(d) => d.label}\r\n                showLabels={false}\r\n                getAngle={(d) => d.angle}\r\n                data={data}\r\n                onValueMouseOver={(evt) => {\r\n                    setHoveredRadial(evt);\r\n                }}\r\n                onSeriesMouseOut={() => setHoveredRadial(false)}\r\n                width={radialRadius}\r\n                height={radialRadius}\r\n                padAngle={0.1}\r\n            >\r\n                {hoveredRadial !== false && (\r\n                    <Hint value={hoveredRadial}>\r\n                        <div\r\n                            style={{\r\n                                background: \"rgba(0,0,0,0.8)\",\r\n                                fontSize: 10,\r\n                            }}\r\n                        >\r\n                            <Typography variant={\"caption\"} gutterBottom>\r\n                                {hoveredRadial.label}\r\n                            </Typography>\r\n                        </div>\r\n                    </Hint>\r\n                )}\r\n            </RadialChart>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {\r\n    Collapse,\r\n    Typography,\r\n    CardContent,\r\n    Box,\r\n    Avatar,\r\n    ListItemAvatar,\r\n    ListItem,\r\n    ListItemText,\r\n    Grid,\r\n    Card,\r\n} from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { listenToEditMenu } from \"../../../../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { testHex, hexToRgb } from \"../../../../utils/utils\";\r\nimport TypeInfo from \"./TypeInfo\";\r\n\r\nfunction EditMenu(props) {\r\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\r\n    const dispatch = useDispatch();\r\n    let selectedType = useSelector((state) => state.SELECTED_TYPE);\r\n    const height = selectedType ? selectedType.height : null;\r\n\r\n    const marks = [\r\n        { value: 0, label: \"min\" },\r\n        { value: 100, label: \"max\" },\r\n    ];\r\n\r\n    const handleListItemClick = (event, name, typeProps) => {\r\n        // ! injects the type name into the attributes themselves\r\n        typeProps.name = name;\r\n        setSelectedIndex(name);\r\n        dispatch(listenToEditMenu(typeProps));\r\n    };\r\n\r\n    const parseTypeInfo = (typeInfo) => {\r\n        //! check type info: if string, parse, else object\r\n        let info =\r\n            typeof typeInfo == \"string\" ? JSON.parse(typeInfo) : typeInfo;\r\n        return info;\r\n    };\r\n\r\n    // create the types themselves\r\n    const createTypesIcons = (LanduseTypesList) => {\r\n        let iconsArr = [];\r\n        Object.keys(LanduseTypesList).forEach((type, index) => {\r\n            // get type description if exist\r\n            let description = LanduseTypesList[type].description\r\n                ? LanduseTypesList[type].description\r\n                : null;\r\n\r\n            let col = LanduseTypesList[type].color;\r\n            // get the LBCS/NAICS types info\r\n            let LBCS = parseTypeInfo(\r\n                props.cityioData.GEOGRID.properties.types[type].LBCS\r\n            );\r\n            let NAICS = parseTypeInfo(\r\n                props.cityioData.GEOGRID.properties.types[type].NAICS\r\n            );\r\n\r\n            if (testHex(col)) {\r\n                col = hexToRgb(col);\r\n            }\r\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\r\n            const selected = selectedIndex === type;\r\n            let typeHasHeightProps = false;\r\n            if (LanduseTypesList[type].height) {\r\n                typeHasHeightProps = true;\r\n            }\r\n\r\n            iconsArr.push(\r\n                <div key={Math.random()}>\r\n                    <ListItem\r\n                        alignItems=\"flex-start\"\r\n                        button\r\n                        variant=\"raised\"\r\n                        selected={selected}\r\n                        onClick={(event) =>\r\n                            handleListItemClick(\r\n                                event,\r\n                                type,\r\n                                LanduseTypesList[type]\r\n                            )\r\n                        }\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Avatar\r\n                                style={{\r\n                                    backgroundColor: rgbCol,\r\n                                    color: \"black\",\r\n                                }}\r\n                            >\r\n                                {type.charAt(0)}\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n\r\n                        <ListItemText primary={type} />\r\n                    </ListItem>\r\n\r\n                    <Collapse in={selected}>\r\n                        <Box spacing={1} p={1} m={1}>\r\n                            <Card elevation={15}>\r\n                                <CardContent>\r\n                                    <Typography variant=\"h5\">\r\n                                        Type Information\r\n                                    </Typography>\r\n\r\n                                    {description && (\r\n                                        <Typography variant=\"caption\">\r\n                                            {description}\r\n                                        </Typography>\r\n                                    )}\r\n                                    <Box spacing={1} p={1} m={1} />\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid\r\n                                            item\r\n                                            xs={6}\r\n                                            l={6}\r\n                                            md={6}\r\n                                            xl={6}\r\n                                            container\r\n                                        >\r\n                                            {LBCS && (\r\n                                                <>\r\n                                                    <Typography variant=\"caption\">\r\n                                                        LBCS\r\n                                                    </Typography>\r\n\r\n                                                    <TypeInfo typeInfo={LBCS} />\r\n                                                </>\r\n                                            )}\r\n                                        </Grid>\r\n                                        <Grid\r\n                                            item\r\n                                            xs={6}\r\n                                            l={6}\r\n                                            md={6}\r\n                                            xl={6}\r\n                                            container\r\n                                        >\r\n                                            {NAICS && (\r\n                                                <>\r\n                                                    <Typography variant=\"caption\">\r\n                                                        NAICS\r\n                                                    </Typography>\r\n                                                    <TypeInfo\r\n                                                        typeInfo={NAICS}\r\n                                                    />\r\n                                                </>\r\n                                            )}\r\n                                        </Grid>\r\n\r\n                                        {typeHasHeightProps && (\r\n                                            <>\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs={10}\r\n                                                    l={10}\r\n                                                    md={10}\r\n                                                    xl={10}\r\n                                                    container\r\n                                                >\r\n                                                    <Typography gutterBottom>\r\n                                                        Set Height\r\n                                                    </Typography>\r\n\r\n                                                    <Slider\r\n                                                        value={height}\r\n                                                        valueLabelDisplay=\"auto\"\r\n                                                        onChange={(\r\n                                                            event,\r\n                                                            value\r\n                                                        ) =>\r\n                                                            dispatch(\r\n                                                                listenToEditMenu(\r\n                                                                    {\r\n                                                                        ...selectedType,\r\n                                                                        height: value,\r\n                                                                    }\r\n                                                                )\r\n                                                            )\r\n                                                        }\r\n                                                        getAriaLabel={(index) =>\r\n                                                            index.toString()\r\n                                                        }\r\n                                                        min={marks[0].value}\r\n                                                        max={marks[1].value}\r\n                                                        marks={marks}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </>\r\n                                        )}\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </Box>\r\n                    </Collapse>\r\n\r\n                    <Divider />\r\n                </div>\r\n            );\r\n        });\r\n        return <List>{iconsArr}</List>;\r\n    };\r\n\r\n    return <>{createTypesIcons(props.cityioData.GEOGRID.properties.types)}</>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cityioData: state.CITYIO,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(EditMenu);\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    root: {\r\n        width: \"80%\",\r\n        marginLeft: 28,\r\n    },\r\n    subtitle1: {\r\n        marginTop: 12,\r\n    },\r\n    subtitle2: {\r\n        marginTop: 12,\r\n    },\r\n});\r\n","import React from \"react\";\r\nimport { DiscreteColorLegend } from \"react-vis\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// ! https://github.com/uber/react-vis/blob/premodern/showcase/legends/searchable-discrete-color.js\r\n\r\nexport default function ABMLegend(props) {\r\n    const tripsAttr = props.trips.tripsData;\r\n    const modes = tripsAttr.mode;\r\n    const profiles = tripsAttr.profile;\r\n\r\n    const prepareLegendData = (string) => {\r\n        let data = string === \"mode\" ? modes : profiles;\r\n\r\n        let legendData = [];\r\n        for (const key in data) {\r\n            legendData.push({ title: data[key].name, color: data[key].color });\r\n        }\r\n        return legendData;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                {props.tripTypeValue === \"mode\" ? \"Mode Choise\" : \"Profiles \"}\r\n            </Typography>\r\n            <DiscreteColorLegend\r\n                height={300}\r\n                width={150}\r\n                items={prepareLegendData(props.tripTypeValue)}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useStyles } from \"./styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    listenToSlidersEvents,\r\n    listenToABMmode,\r\n} from \"../../../../../redux/actions\";\r\nimport ABMLegend from \"./ABMLegend\";\r\n\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nconst marks = [\r\n    {\r\n        value: 0,\r\n        label: \"12AM\",\r\n    },\r\n    {\r\n        value: 21600,\r\n        label: \"6AM\",\r\n    },\r\n    {\r\n        value: 43200,\r\n        label: \"12PM\",\r\n    },\r\n    {\r\n        value: 64800,\r\n        label: \"6PM\",\r\n    },\r\n    {\r\n        value: 86400,\r\n        label: \"12AM\",\r\n    },\r\n];\r\n\r\nfunction ABMSubmenu(props) {\r\n    const classes = useStyles();\r\n    const sliders = useSelector((state) => state.SLIDERS);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSetTimeValue = (e, newValue) => {\r\n        dispatch(\r\n            listenToSlidersEvents({\r\n                ...sliders,\r\n                time: newValue,\r\n            })\r\n        );\r\n    };\r\n\r\n    const handleSetSpeedValue = (e, newValue) => {\r\n        dispatch(\r\n            listenToSlidersEvents({\r\n                ...sliders,\r\n                speed: newValue,\r\n            })\r\n        );\r\n    };\r\n\r\n    const [tripTypeValue, settripTypeValue] = React.useState(\"mode\");\r\n\r\n    const handleABMmodeChange = (event) => {\r\n        dispatch(listenToABMmode(event.target.value));\r\n        settripTypeValue(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <FormControl component=\"fieldset\">\r\n                <RadioGroup\r\n                    aria-label=\"tripType\"\r\n                    name=\"tripType\"\r\n                    value={tripTypeValue}\r\n                    onChange={handleABMmodeChange}\r\n                >\r\n                    <FormControlLabel\r\n                        value=\"mode\"\r\n                        control={<Radio />}\r\n                        label=\"Mode Choice\"\r\n                    />\r\n                    <FormControlLabel\r\n                        value=\"profile\"\r\n                        control={<Radio />}\r\n                        label=\"Profile\"\r\n                    />\r\n                </RadioGroup>\r\n            </FormControl>\r\n\r\n            <ABMLegend trips={props} tripTypeValue={tripTypeValue} />\r\n            <Typography\r\n                className={classes.subtitle1}\r\n                variant=\"subtitle2\"\r\n                id=\"range-slider\"\r\n                gutterBottom\r\n            >\r\n                Simulation Range\r\n            </Typography>\r\n            <Slider\r\n                min={0}\r\n                max={86400}\r\n                marks={marks}\r\n                value={sliders.time}\r\n                onChange={handleSetTimeValue}\r\n                valueLabelDisplay=\"off\"\r\n                aria-labelledby=\"range-slider\"\r\n            />\r\n            <Typography\r\n                className={classes.subtitle2}\r\n                variant=\"subtitle2\"\r\n                id=\"continuous-slider\"\r\n                gutterBottom\r\n            >\r\n                Simulation Speed\r\n            </Typography>\r\n            <Slider\r\n                min={0}\r\n                max={100}\r\n                value={sliders.speed}\r\n                onChange={handleSetSpeedValue}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"continuous-slider\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ABMSubmenu;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    root: {\r\n        width: \"80%\",\r\n        marginLeft: 28,\r\n    },\r\n    subtitle1: {\r\n        marginTop: 12,\r\n    },\r\n    subtitle2: {\r\n        marginTop: 12,\r\n    },\r\n});\r\n","import React from \"react\";\r\nimport { useStyles } from \"./styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { listenToSlidersEvents } from \"../../../../../redux/actions\";\r\n\r\nfunction ShadowSubmenu() {\r\n    const classes = useStyles();\r\n\r\n    const sliders = useSelector((state) => state.SLIDERS);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSetTimeValue = (e, newValue) => {\r\n        dispatch(\r\n            listenToSlidersEvents({\r\n                ...sliders,\r\n                time: newValue,\r\n            })\r\n        );\r\n    };\r\n\r\n    const marks = [\r\n        {\r\n            value: 0,\r\n            label: \"12AM\",\r\n        },\r\n        {\r\n            value: 21600,\r\n            label: \"6AM\",\r\n        },\r\n        {\r\n            value: 43200,\r\n            label: \"12PM\",\r\n        },\r\n        {\r\n            value: 64800,\r\n            label: \"6PM\",\r\n        },\r\n        {\r\n            value: 86400,\r\n            label: \"12AM\",\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography\r\n                className={classes.subtitle1}\r\n                variant=\"subtitle2\"\r\n                id=\"range-slider\"\r\n                gutterBottom\r\n            >\r\n                Time of day\r\n            </Typography>\r\n            <Slider\r\n                min={0}\r\n                max={86400}\r\n                marks={marks}\r\n                value={sliders.time}\r\n                onChange={handleSetTimeValue}\r\n                valueLabelDisplay=\"off\"\r\n                aria-labelledby=\"range-slider\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShadowSubmenu;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport { listenToAccessToggle } from \"../../../../../redux/actions\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport { ContinuousColorLegend } from \"react-vis\";\r\n\r\nimport settings from \"../../../../../settings/settings.json\";\r\n\r\nfunction AccessSubmenu(props) {\r\n    const accessToggle = useSelector((state) => state.ACCESS_TOGGLE);\r\n\r\n    const { cityioData } = props;\r\n\r\n    const ACCESS_PROPERTIES =\r\n        cityioData && cityioData.access && cityioData.access.properties\r\n            ? cityioData.access.properties\r\n            : [];\r\n\r\n    const dispatch = useDispatch();\r\n    const c = settings.map.layers.heatmap.colors;\r\n    const l = c.length - 1;\r\n    return (\r\n        <List>\r\n            <ListItem>\r\n                <ContinuousColorLegend\r\n                    width={500}\r\n                    startColor={\r\n                        \"rgb(\" + c[0][0] + \",\" + c[0][1] + \",\" + c[0][2] + \")\"\r\n                    }\r\n                    endColor={\r\n                        \"rgb(\" + c[l][0] + \",\" + c[l][1] + \",\" + c[l][2] + \")\"\r\n                    }\r\n                    startTitle=\"No Access\"\r\n                    endTitle=\"Full Access\"\r\n                />\r\n            </ListItem>\r\n            {ACCESS_PROPERTIES.map((p, i) => (\r\n                <ListItem key={p}>\r\n                    <ListItemText\r\n                        primary={p}\r\n                        style={{ textTransform: \"capitalize\" }}\r\n                    />\r\n                    <ListItemSecondaryAction>\r\n                        <Switch\r\n                            edge=\"end\"\r\n                            checked={accessToggle === i}\r\n                            onChange={() => {\r\n                                dispatch(listenToAccessToggle(i));\r\n                            }}\r\n                        />\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default AccessSubmenu;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport settings from \"../../../../settings/settings.json\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport ABMSubmenu from \"./ABMSubmenu\";\r\nimport ShadowSubmenu from \"./ShadowSubmenu\";\r\nimport AccessSubmenu from \"./AccessSubmenu\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nfunction TogglesMenu(props) {\r\n    const { handleToggle } = props;\r\n        const { menuState, cityioData } = useSelector((state) => ({\r\n        menuState: state.MENU,\r\n        cityioData: state.CITYIO,\r\n    }));\r\n\r\n    const togglesMeta = settings.menu.toggles;\r\n    const listOfToggles = Object.keys(togglesMeta);\r\n    // console.log('listOfToggles',listOfToggles);\r\n    // console.log('menuState',menuState);\r\n    // console.log('cityioData',cityioData);\r\n    /**\r\n     * gets props with initial menu state\r\n     * and turn on the layer on init\r\n     */\r\n    let togglesCompsArray = [];\r\n    // array of loaded API modules\r\n    const loadedModules = Object.keys(cityioData);\r\n    // create each toggle\r\n    for (let i = 0; i < listOfToggles.length; i++) {\r\n        // check if the mdoule of this toggle\r\n        // was loaded on the API\r\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\r\n\r\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\r\n\r\n        if (loadedModules.includes(requireModule) || requireModule === false) {\r\n            const thisToggle = (\r\n                <div key={listOfToggles[i]}>\r\n                    <ListItem>\r\n                        <Switch\r\n                            edge=\"start\"\r\n                            onChange={handleToggle(listOfToggles[i])}\r\n                            checked={checked}\r\n                        />\r\n                        <ListItemText\r\n                            primary={togglesMeta[listOfToggles[i]].displayName}\r\n                        />\r\n                    </ListItem>\r\n\r\n                    {\r\n                        // ! Handle submenus of ABM/ACCESS\r\n\r\n                        listOfToggles[i] === \"SHADOWS\" && (\r\n                            <Collapse in={checked}>\r\n                                <ShadowSubmenu />\r\n                            </Collapse>\r\n                        )\r\n                    }\r\n\r\n                    {\r\n                        // ! Handle submenus of ABM/ACCESS\r\n\r\n                        listOfToggles[i] === \"ABM\" && (\r\n                            <Collapse in={checked}>\r\n                                <ABMSubmenu tripsData={cityioData.ABM2.attr} />\r\n                            </Collapse>\r\n                        )\r\n                    }\r\n                    {listOfToggles[i] === \"ACCESS\" && (\r\n                        <Collapse\r\n                            in={checked}\r\n                            style={{\r\n                                marginLeft: 24,\r\n                            }}\r\n                        >\r\n                            <AccessSubmenu cityioData={cityioData} />\r\n                        </Collapse>\r\n                    )}\r\n                </div>\r\n            );\r\n            togglesCompsArray.push(thisToggle);\r\n        }\r\n    }\r\n\r\n    return <List>{togglesCompsArray}</List>;\r\n}\r\n\r\nexport default TogglesMenu;\r\n","import React, { useEffect } from \"react\";\r\nimport settings from \"../../../../settings/settings.json\";\r\nimport gridSetting from \"../../../../settings/GridEditorSettings.json\"\r\nimport { FormControl, FormLabel, FormControlLabel, RadioGroup, Radio, CircularProgress, Stepper, Step, StepLabel, StepButton } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport axios from 'axios'\r\n// import scenario1 from '../../../../settings/LandUse_0.json'\r\n// import scenario2 from '../../../../settings/LandUse_2.json'\r\nimport {\r\n    getCityioData,\r\n    setReadyState,\r\n    setLoadingState,\r\n    setScenarioNames,\r\n    addLoadingModules,\r\n    removeLoadingModules,\r\n} from \"../../../../redux/actions\";\r\n\r\nconst getAPICall = async (URL) => {\r\n    try {\r\n        // ! should add 'retry' here\r\n        // ! https://stackoverflow.com/questions/56074531/how-to-retry-5xx-requests-using-axios\r\n        const response = await axios.get(URL);\r\n        return response.data;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nconst makeGEOGRIDDATAobject = (geoJsonFeatures) => {\r\n    let GEOGRIDDATA_object = []\r\n    geoJsonFeatures.forEach((element) => {\r\n        GEOGRIDDATA_object.push(element.properties)\r\n    })\r\n    return GEOGRIDDATA_object\r\n}\r\n\r\nconst makeGEOGRIDobject = (struct, typesList, geoJsonFeatures, gridProps) => {\r\n    let GEOGRID_object = struct\r\n\r\n    // take types list and prepare to csJS format\r\n    let newTypesList = {}\r\n\r\n    typesList.forEach((oldType) => {\r\n        newTypesList[oldType.name] = oldType\r\n        //material-table creates strings for these items\r\n        // so in first \"Commit to cityIO\", these must be turned into\r\n        // Json objects. On Second commit, these are already objects,\r\n        // hence the two conditions below\r\n\r\n        newTypesList[oldType.name].LBCS =\r\n            typeof oldType.LBCS == 'string' ? JSON.parse(oldType.LBCS) : oldType.LBCS\r\n        newTypesList[oldType.name].NAICS =\r\n            typeof oldType.NAICS == 'string'\r\n                ? JSON.parse(oldType.NAICS)\r\n                : oldType.NAICS\r\n    })\r\n\r\n    GEOGRID_object.properties.types = newTypesList\r\n\r\n    // inject table props to grid\r\n    GEOGRID_object.properties.header = gridProps\r\n    GEOGRID_object.properties.header.longitude = parseFloat(\r\n        GEOGRID_object.properties.header.longitude,\r\n    )\r\n    GEOGRID_object.properties.header.latitude = parseFloat(\r\n        GEOGRID_object.properties.header.latitude,\r\n    )\r\n    GEOGRID_object.properties.header.rotation = parseFloat(\r\n        GEOGRID_object.properties.header.rotation,\r\n    )\r\n    GEOGRID_object.properties.header.nrows = parseFloat(\r\n        GEOGRID_object.properties.header.nrows,\r\n    )\r\n    GEOGRID_object.properties.header.ncols = parseFloat(\r\n        GEOGRID_object.properties.header.ncols,\r\n    )\r\n    GEOGRID_object.properties.header.cellSize = parseFloat(\r\n        GEOGRID_object.properties.header.cellSize,\r\n    )\r\n\r\n    // lastly get the grid features\r\n    GEOGRID_object.features = geoJsonFeatures\r\n    return GEOGRID_object\r\n}\r\n\r\nconst postGridToCityIO = async (myTypeList, myGeoJsonFeatures) => {\r\n    let GEOGRIDstruct = gridSetting.GEOGRID\r\n    let typesList = myTypeList;\r\n    // let geoJsonFeatures = reduxState.GRID_CREATED.features\r\n    let geoJsonFeatures = myGeoJsonFeatures\r\n    let gridProps = gridSetting.GEOGRID.properties.header\r\n    gridProps.tableName = gridSetting.map.projectName;\r\n\r\n    // take grid struct from settings\r\n    // console.log('GEOGRIDstruct', GEOGRIDstruct);\r\n    // console.log('typesList', typesList);\r\n    // console.log('geoJsonFeatures', geoJsonFeatures);\r\n    // console.log('gridProps', gridProps);\r\n    let GEOGRID_object = makeGEOGRIDobject(\r\n        GEOGRIDstruct,\r\n        typesList,\r\n        geoJsonFeatures,\r\n        gridProps,\r\n    )\r\n    console.log('GEOGRID_object', GEOGRID_object);\r\n\r\n    let GEOGRIDDATA_object = makeGEOGRIDDATAobject(geoJsonFeatures)\r\n    let tableName = GEOGRID_object.properties.header.tableName.toLowerCase()\r\n\r\n    const geoGridOptions = (URL, DATA) => {\r\n        return {\r\n            method: 'post',\r\n            url: URL,\r\n            data: DATA,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n        }\r\n    }\r\n\r\n    const table_url = `${settings.cityIO.baseURL}${tableName}/`\r\n    const new_table_grid = {\r\n        GEOGRID: GEOGRID_object,\r\n        GEOGRIDDATA: GEOGRIDDATA_object,\r\n    }\r\n    let response = await axios(geoGridOptions(table_url, new_table_grid));\r\n    return response.data;\r\n}\r\n\r\nconst createtypesArray = (LanduseTypesList) => {\r\n    let typesArray = []\r\n    Object.keys(LanduseTypesList).forEach((type) => {\r\n        typesArray.push({\r\n            name: type,\r\n            description: 'description for: ' + type,\r\n            color: LanduseTypesList[type].color,\r\n            height: LanduseTypesList[type].height\r\n                ? LanduseTypesList[type].height\r\n                : 0,\r\n\r\n            LBCS: LanduseTypesList[type].LBCS\r\n                ? JSON.stringify(LanduseTypesList[type].LBCS)\r\n                : null,\r\n            NAICS: LanduseTypesList[type].NAICS\r\n                ? JSON.stringify(LanduseTypesList[type].NAICS)\r\n                : null,\r\n            interactive: LanduseTypesList[type].interactive\r\n                ? LanduseTypesList[type].interactive\r\n                : \"web\",\r\n            TypeCode: LanduseTypesList[type].TypeCode\r\n                ? LanduseTypesList[type].TypeCode\r\n                : null,\r\n            IDSColor: LanduseTypesList[type].IDSColor\r\n                ? LanduseTypesList[type].IDSColor\r\n                : null,\r\n            RGB: LanduseTypesList[type].RGB\r\n                ? LanduseTypesList[type].RGB\r\n                : null,\r\n        })\r\n    })\r\n    return typesArray\r\n}\r\n\r\nfunction getSteps() {\r\n    return [\"2021\", \"2030\"];\r\n}\r\n\r\nfunction ChooseScenario(props) {\r\n    const chosenScenario = props.chosenScenario;\r\n    const displayUI = props.displayUI;\r\n    const [radioValue, setRadioValue] = useState('scenario1');\r\n    const [loading, setLoading] = useState(false);\r\n    // const reduxState = useSelector((state) => state)\r\n    // console.log(reduxState.TYPES_LIST);\r\n\r\n    useEffect(() => {\r\n        async function autoChangeScenario() {\r\n            await getModules(chosenScenario);\r\n        }\r\n        autoChangeScenario();\r\n    }, [chosenScenario]);\r\n\r\n    const handleRadioChange = async (event) => {\r\n        let myChosenScenario = event.target.value\r\n        let fileScenario = null;\r\n        setRadioValue(myChosenScenario);\r\n        switch (myChosenScenario) {\r\n            case 'scenario1':\r\n                // fileScenario = scenario1;\r\n                break;\r\n            case 'scenario2':\r\n                // fileScenario = scenario2;\r\n                break;\r\n        }\r\n        let geoJsonFeatures = fileScenario.features;\r\n        let typesList = createtypesArray(gridSetting.GEOGRID.properties.types);\r\n        setLoading(true);\r\n        await postGridToCityIO(typesList, geoJsonFeatures);\r\n        setLoading(false);\r\n    }\r\n\r\n    /* ONLY GETTING DATA */\r\n    const [hashes, setHashes] = useState({});\r\n    const cityioData = useSelector((state) => state.CITYIO);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const steps = getSteps();\r\n\r\n    async function getModules(tableName) {\r\n        let cityioURL = `${settings.cityIO.baseURL}${tableName}/`;\r\n        const newHashes = await getAPICall(cityioURL + \"meta/hashes/\");\r\n        const promises = [];\r\n        const loadingModules = [];\r\n        const pickedModules = settings.cityIO.cityIOmodules.map((x) => x.name);\r\n        // for each of the modules in settings, add api call to promises\r\n        pickedModules.forEach((module) => {\r\n            if (hashes[module] !== newHashes[module]) {\r\n                promises.push(getAPICall(`${cityioURL}${module}/`));\r\n                loadingModules.push(module);\r\n                // if(newHashes[module]){\r\n                // }\r\n            } else {\r\n                promises.push(null);\r\n            }\r\n        });\r\n        dispatch(addLoadingModules(loadingModules));\r\n        const modules = await Promise.all(promises);\r\n        setHashes(newHashes);\r\n        // console.log('modules', modules);\r\n\r\n        // update cityio object with modules data\r\n        const modulesData = pickedModules.reduce((obj, k, i) => {\r\n            if (modules[i]) {\r\n                console.log(`updating ${k}`);\r\n                return { ...obj, [k]: modules[i] };\r\n            } else {\r\n                return obj;\r\n            }\r\n        }, cityioData);\r\n        modulesData.tableName = tableName;\r\n        // console.log('modulesData', modulesData);\r\n\r\n        dispatch(removeLoadingModules(loadingModules));\r\n\r\n        // send to cityio\r\n        dispatch(getCityioData(modulesData));\r\n        console.log(\"done updating from cityIO\");\r\n\r\n        // initializes rendering of Menu and Map containers\r\n        dispatch(setReadyState(true));\r\n        dispatch(setLoadingState(false));\r\n    }\r\n\r\n    const handleStepByGetCityIOData = (step) => async () => {\r\n        setActiveStep(step);\r\n        let tableName = null;\r\n        switch (step) {\r\n            case 0:\r\n                tableName = 'hcm_test_v1';\r\n                break;\r\n            case 1:\r\n                tableName = 'hcm_test_v2';\r\n                break;\r\n        }\r\n        setLoading(true);\r\n        await getModules(tableName);\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Scenarios</FormLabel>\r\n                <RadioGroup aria-label=\"my-scenario\" name=\"my-scenario\" value={radioValue} onChange={handleRadioChange} >\r\n                    <FormControlLabel value=\"scenario1\" control={<Radio />} label=\"Scenario 1\" disabled={loading} />\r\n                    <FormControlLabel value=\"scenario2\" control={<Radio />} label=\"Scenario 2\" disabled={loading} />\r\n                </RadioGroup>\r\n                \r\n            </FormControl> */}\r\n            {displayUI && <Stepper alternativeLabel nonLinear activeStep={activeStep}>\r\n                {steps.map((label, index) => {\r\n                    return (\r\n                        <Step key={label}>\r\n                            <StepButton\r\n                                onClick={handleStepByGetCityIOData(index)}\r\n                                icon={'•'}\r\n                                disabled={loading}\r\n                            >\r\n                                <StepLabel>{label}</StepLabel>\r\n                            </StepButton>\r\n                        </Step>\r\n                    );\r\n                })}\r\n            </Stepper>}\r\n            {loading && <CircularProgress />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChooseScenario;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { listenToMenuUI } from \"../../../redux/actions\";\r\nimport EditMenu from \"./EditMenu\";\r\nimport TogglesMenu from \"./TogglesMenu\";\r\nimport SaveMenu from \"./SaveMenu\";\r\nimport { Button, Typography, List, ListItem, FormControl, FormLabel, FormControlLabel, RadioGroup, Radio } from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport settings from \"../../../settings/settings.json\";\r\nimport ChooseScenario from \"./ChooseScenario\";\r\n\r\nconst getAPICall = async (URL) => {\r\n    try {\r\n        const response = await axios.get(URL);\r\n        return response.data;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\nfunction MenuContainer(props) {\r\n    const { tableName } = props;\r\n    const menuState = useSelector((state) => state.MENU);\r\n    const cityioData = useSelector((state) => state.CITYIO);\r\n\r\n    const loadedModules = Object.keys(cityioData);\r\n    const togglesMeta = settings.menu.toggles;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleToggle = (value) => () => {\r\n        const i = menuState.indexOf(value);\r\n        const updatedMenuState = [...menuState];\r\n        if (i === -1) {\r\n            updatedMenuState.push(value);\r\n        } else {\r\n            updatedMenuState.splice(i, 1);\r\n        }\r\n        dispatch(listenToMenuUI(updatedMenuState));\r\n    };\r\n\r\n    let myMenuState = [...menuState];\r\n    const [chosenScenario, setChosenScenario] = useState(\"hcm_test_v1\");\r\n    let myChosenScenario = 'hcm_test_v1';\r\n\r\n    useEffect(() => {\r\n        // listenChangingOption();\r\n        const timer = setTimeout(listenChangingOption, 1000);\r\n        return () => clearTimeout(timer);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // /* Listening View Option Change */\r\n    async function listenChangingOption() {\r\n        const options = await getAPICall(`${process.env.REACT_APP_EXPRESS_PUBLIC_URL}/get-option`);\r\n        const scenarioObject = await getAPICall(`${process.env.REACT_APP_EXPRESS_PUBLIC_URL}/get-scenario`);\r\n        if (options) {\r\n            console.log(options);\r\n            let table = options.table;\r\n            let option = options.option;\r\n            let mode = options.mode;\r\n            if (table == tableName) {\r\n                if (option) {\r\n                    let requireModule = togglesMeta[option].requireModule;\r\n                    if (loadedModules.includes(requireModule) || requireModule === false) {\r\n                        const i = myMenuState.indexOf(option);\r\n                        if (mode == \"ON\") {\r\n                            if (i === -1) {\r\n                                myMenuState.push(option);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (i !== -1) {\r\n                                myMenuState.splice(i, 1);\r\n                            }\r\n                        }\r\n                        dispatch(listenToMenuUI(myMenuState));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (scenarioObject) {\r\n            console.log(scenarioObject);\r\n            let scenario = scenarioObject.scenario;\r\n            if (scenario && scenario != myChosenScenario) {\r\n                myChosenScenario = scenario;\r\n                setChosenScenario(scenario);\r\n            }\r\n        }\r\n        setTimeout(listenChangingOption, 1000);\r\n    }\r\n\r\n    /* END Listening */\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {/* <ListItem>\r\n                    <Typography variant={\"h2\"}>Grid Edit</Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button\r\n                        startIcon={\r\n                            menuState.includes(\"EDIT\") ? (\r\n                                <>\r\n                                    <CloudUploadIcon />\r\n                                    Send to cityIO\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <EditIcon />\r\n                                    Edit Mode\r\n                                </>\r\n                            )\r\n                        }\r\n                        color=\"default\"\r\n                        onClick={handleToggle(\"EDIT\")}\r\n                    ></Button>\r\n                </ListItem> */}\r\n\r\n                {/* <EditMenu />\r\n\r\n                <ListItem>\r\n                    <Typography variant={\"h2\"}>Scenarios</Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <SaveMenu\r\n                        tableName={tableName}\r\n                        handleToggle={handleToggle}\r\n                    />\r\n                </ListItem> */}\r\n\r\n                <ListItem>\r\n                    <Typography variant={\"h2\"}>View Options</Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button\r\n                        startIcon={\r\n                            <>\r\n                                <NavigationIcon />\r\n                                {'RESET VIEW'}\r\n                            </>\r\n                        }\r\n                        color=\"default\"\r\n                        onClick={handleToggle(\"RESET_VIEW\")}\r\n                    />\r\n                </ListItem>\r\n            </List>\r\n\r\n            <TogglesMenu handleToggle={handleToggle} />\r\n            <ChooseScenario chosenScenario={chosenScenario} displayUI={true}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MenuContainer;\r\n","import React from \"react\";\r\nimport { testHex, hexToRgb } from \"../../../../../utils/utils\";\r\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\r\n\r\n/**\r\n * cell selection\r\n * meta div\r\n * @param {*} props\r\n */\r\n\r\nexport const PaintBrush = (props) => {\r\n    if (!props.mousePos || !props.hoveredCells) return null;\r\n    const selectedType = props.selectedType;\r\n\r\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\r\n    const mousePos = props.mousePos;\r\n    const divSize = props.divSize;\r\n    let col = selectedType.color;\r\n    if (testHex(col)) {\r\n        col = hexToRgb(col);\r\n    }\r\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\r\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\r\n    let mouseX = mousePos.clientX - divSize / 2;\r\n    let mouseY = mousePos.clientY - divSize / 2;\r\n\r\n    let msg = isInteractiveCell ? selectedType.name : \"Not-interactive\";\r\n    return (\r\n        <div\r\n            style={{\r\n                border: \"2px solid\",\r\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\r\n                borderColor: color,\r\n                color: color,\r\n                borderRadius: \"15%\",\r\n                position: \"fixed\",\r\n                zIndex: 10,\r\n                pointerEvents: \"none\",\r\n                width: divSize,\r\n                height: divSize,\r\n                left: mouseX,\r\n                top: mouseY,\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    position: \"relative\",\r\n                    left: divSize + 10,\r\n                    fontSize: \"0.8em\",\r\n                }}\r\n            >\r\n                {!isInteractiveCell && <ErrorOutlineIcon />}\r\n                {msg}:\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\n/**\r\n *\r\n * Cell meta comp\r\n */\r\n\r\nexport const CellMeta = (props) => {\r\n    if (!props.mousePos) return null;\r\n    const mousePos = props.mousePos;\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                borderRadius: \"10%\",\r\n                position: \"fixed\",\r\n                pointerEvents: \"none\",\r\n                backgroundColor: \"rgba(0,0,0,0.5)\",\r\n                padding: \"1vw\",\r\n                color: \"rgba(255,255,255,0.9)\",\r\n                zIndex: 10,\r\n                left: mousePos.clientX,\r\n                top: mousePos.clientY,\r\n                fontFamily:'monospace',\r\n                fontSize: \"0.65em\",\r\n                fontWeight: 500,\r\n            }}\r\n        >\r\n            <p>\r\n                Type:\r\n                {props.hoveredObj.object.properties.name}\r\n            </p>\r\n            <p>\r\n                Floors:\r\n                {props.hoveredObj.object.properties.height}\r\n            </p>\r\n            <p>\r\n                ID:\r\n                {props.hoveredObj.object.properties.id}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { PaintBrush } from \"./PaintBrush\";\r\nimport { CellMeta } from \"../CellMeta\";\r\n\r\nexport default function PaintBrushContainer({\r\n    editOn,\r\n    mousePos,\r\n    selectedType,\r\n    pickingRadius,\r\n    mouseDown,\r\n    hoveredObj,\r\n}) {\r\n    if (editOn) {\r\n        return (\r\n            selectedType && (\r\n                <PaintBrush\r\n                    mousePos={mousePos}\r\n                    selectedType={selectedType}\r\n                    divSize={pickingRadius}\r\n                    mouseDown={mouseDown}\r\n                    hoveredCells={hoveredObj}\r\n                />\r\n            )\r\n        );\r\n    } else {\r\n        return (\r\n            hoveredObj && (\r\n                <CellMeta mousePos={mousePos} hoveredObj={hoveredObj} />\r\n            )\r\n        );\r\n    }\r\n}\r\n","import { Component } from \"react\";\r\n\r\nclass AnimationComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.animationFrame = null;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.animationFrame) {\r\n            window.cancelAnimationFrame(this.animationFrame);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // start ainmation/sim/roate\r\n        this._animate();\r\n    }\r\n\r\n    _animate() {\r\n        const {\r\n            toggles: { rotateOn, ABMOn },\r\n            state: { viewState, sliders },\r\n            updaters: { listenToSlidersEvents, sunEffects, setViewState },\r\n            dispatch,\r\n        } = this.props;\r\n        if (rotateOn) {\r\n            let bearing = viewState.bearing ? viewState.bearing : 0;\r\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\r\n            setViewState({\r\n                ...viewState,\r\n                bearing: bearing,\r\n            });\r\n        }\r\n\r\n        if (ABMOn) {\r\n            const time = sliders.time[1];\r\n            const speed = sliders.speed;\r\n            const startHour = sliders.time[0];\r\n            const endHour = sliders.time[2];\r\n\r\n            let t = parseInt(time) + parseInt(speed);\r\n            if (time < startHour || time > endHour) {\r\n                t = startHour;\r\n            }\r\n\r\n            dispatch(\r\n                listenToSlidersEvents({\r\n                    ...sliders,\r\n                    time: [sliders.time[0], t, sliders.time[2]],\r\n                })\r\n            );\r\n\r\n            // update sun position\r\n            if (sunEffects) {\r\n                sunEffects.updateSunDirection(t);\r\n            }\r\n        }\r\n        // ! start the req animation frame\r\n        this.animationFrame = window.requestAnimationFrame(\r\n            this._animate.bind(this)\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default AnimationComponent;\r\n","import { ColumnLayer } from 'deck.gl'\r\nimport { HeatmapLayer } from 'deck.gl'\r\nimport settings from '../../../../settings/settings.json'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default function AccessLayer({ data, cellSize }) {\r\n  const accessToggle = useSelector((state) => [state.ACCESS_TOGGLE])\r\n  return new HeatmapLayer({\r\n    id: 'ACCESS',\r\n    colorRange: settings.map.layers.heatmap.colors,\r\n    radiusPixels: 200,\r\n    opacity: 0.5,\r\n    threshold: 0.5,\r\n    data,\r\n    getPosition: (d) => d.coordinates,\r\n    getWeight: (d) => d.values[accessToggle],\r\n    updateTriggers: {\r\n      getWeight: [accessToggle],\r\n    },\r\n  })\r\n  // return new ColumnLayer({\r\n  //   id: 'column-layer',\r\n  //   data,\r\n  //   shadowEnabled: false,\r\n\r\n  //   material: false,\r\n  //   diskResolution: 12,\r\n  //   radius: cellSize,\r\n  //   extruded: true,\r\n  //   pickable: true,\r\n  //   elevationScale: 100,\r\n  //   getPosition: (d) => d.coordinates,\r\n  //   colorRange: settings.map.layers.heatmap.colors,\r\n  //   getFillColor: (d) => [255 * d.values[accessToggle], 82, 120, 200],\r\n  //   getLineColor: [0, 0, 0],\r\n  //   getElevation: (d) => d.values[accessToggle],\r\n  //   updateTriggers: {\r\n  //     getElevation: [accessToggle],\r\n  //     getFillColor: [accessToggle],\r\n  //   },\r\n  //   transitions: {\r\n  //     getFillColor: 500,\r\n  //     getElevation: 200,\r\n  //   },\r\n  // })\r\n}\r\n","import { PathLayer } from \"deck.gl\";\r\nimport { hexToRgb } from \"../../../../utils/utils\";\r\n\r\nexport default function AggregatedTripsLayer({ data, cityioData, ABMmode }) {\r\n    return new PathLayer({\r\n        id: \"AGGREGATED_TRIPS\",\r\n        shadowEnabled: false,\r\n        data,\r\n        getPath: (d) => {\r\n            const noisePath =\r\n                Math.random() < 0.5\r\n                    ? Math.random() * 0.00005\r\n                    : Math.random() * -0.00005;\r\n            for (let i in d.path) {\r\n                d.path[i][0] = d.path[i][0] + noisePath;\r\n                d.path[i][1] = d.path[i][1] + noisePath;\r\n                d.path[i][2] = d.mode[0] * 2;\r\n            }\r\n            return d.path;\r\n        },\r\n        getColor: (d) => {\r\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\r\n            return col;\r\n        },\r\n        opacity: 0.2,\r\n        getWidth: 1.5,\r\n\r\n        updateTriggers: {\r\n            getColor: ABMmode,\r\n        },\r\n        transitions: {\r\n            getColor: 500,\r\n        },\r\n    });\r\n}\r\n","import { TripsLayer } from '@deck.gl/geo-layers'\r\nimport { hexToRgb } from '../../../../utils/utils'\r\n\r\n//  * remap line width\r\nconst _remapValues = (value) => {\r\n  let remap = value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30\r\n  return remap\r\n}\r\n\r\nexport default function ABMLayer({\r\n  data,\r\n  cityioData,\r\n  ABMmode,\r\n  zoomLevel,\r\n  sliders,\r\n}) {\r\n  return new TripsLayer({\r\n    id: 'ABM',\r\n    data,\r\n    getPath: (d) => d.path,\r\n    getTimestamps: (d) => d.timestamps,\r\n    getColor: (d) => {\r\n      let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color)\r\n      return col\r\n    },\r\n    shadowEnabled: false,\r\n    getWidth: 1,\r\n    widthScale: _remapValues(zoomLevel),\r\n    opacity: 0.8,\r\n    rounded: true,\r\n    trailLength: 500,\r\n    currentTime: sliders.time[1],\r\n\r\n    updateTriggers: {\r\n      getColor: ABMmode,\r\n    },\r\n    transitions: {\r\n      getColor: 500,\r\n    },\r\n  })\r\n}\r\n","import { GeoJsonLayer } from \"deck.gl\";\r\nimport { _handleGridcellEditing } from \"../../../../utils/utils\";\r\n\r\nexport default function GridLayer({\r\n    data,\r\n    editOn,\r\n    state: { selectedType, keyDownState, selectedCellsState, pickingRadius },\r\n    updaters: { setSelectedCellsState, setDraggingWhileEditing, setHoveredObj },\r\n    deckGL,\r\n}) {\r\n    return new GeoJsonLayer({\r\n        id: \"GRID\",\r\n        data,\r\n        pickable: true,\r\n        extruded: true,\r\n        wireframe: true,\r\n        lineWidthScale: 1,\r\n        lineWidthMinPixels: 2,\r\n        getElevation: (d) => d.properties.height,\r\n        getFillColor: (d) => d.properties.color,\r\n\r\n        onClick: (event) => {\r\n            if (selectedType && editOn && keyDownState !== \"Shift\")\r\n                _handleGridcellEditing(\r\n                    event,\r\n                    selectedType,\r\n                    setSelectedCellsState,\r\n                    pickingRadius,\r\n                    deckGL\r\n                );\r\n        },\r\n\r\n        onDrag: (event) => {\r\n            if (selectedType && editOn && keyDownState !== \"Shift\")\r\n                _handleGridcellEditing(\r\n                    event,\r\n                    selectedType,\r\n                    setSelectedCellsState,\r\n                    pickingRadius,\r\n                    deckGL\r\n                );\r\n        },\r\n\r\n        onDragStart: () => {\r\n            if (selectedType && editOn && keyDownState !== \"Shift\") {\r\n                setDraggingWhileEditing(true);\r\n            }\r\n        },\r\n\r\n        onHover: (e) => {\r\n            if (e.object) {\r\n                setHoveredObj(e);\r\n            }\r\n        },\r\n\r\n        onDragEnd: () => {\r\n            setDraggingWhileEditing(false);\r\n        },\r\n        updateTriggers: {\r\n            getFillColor: selectedCellsState,\r\n            getElevation: selectedCellsState,\r\n        },\r\n        transitions: {\r\n            getFillColor: 500,\r\n            getElevation: 500,\r\n        },\r\n    });\r\n}\r\n","import { TextLayer } from \"@deck.gl/layers\";\r\n\r\nexport default function TextualLayer({ data, coordinates }) {\r\n    /*\r\n     * this layer takes textual layer procuded by a 3rd party\r\n     * module, and renders a text message near the grid cell\r\n     * defined in the data id attribute.\r\n     *\r\n     * data format:\r\n      [\r\n      {\"id\": 0, \"info\": \"yes!\" },   {\"id\": 10, \"info\": \"I'm on ID 10!\" }\r\n      ]\r\n     *\r\n     * coordinates format:\r\n     [\r\n       {\"info\": \"yes!\", coordinates: [-122.466233, 37.684638]},\r\n     ]\r\n     */\r\n\r\n    if (data && coordinates && coordinates.features) {\r\n        let textLayerData = [];\r\n\r\n        data.forEach((infoIteam) => {\r\n            textLayerData.push({\r\n                coordinates: [\r\n                    coordinates.features[infoIteam.id].geometry\r\n                        .coordinates[0][0][0],\r\n                    coordinates.features[infoIteam.id].geometry\r\n                        .coordinates[0][0][1],\r\n                    100,\r\n                ],\r\n                info: infoIteam.info,\r\n            });\r\n        });\r\n\r\n        return new TextLayer({\r\n            id: \"text-layer\",\r\n            data: textLayerData,\r\n            pickable: true,\r\n            getPosition: (d) => d.coordinates,\r\n            getText: (d) => d.info,\r\n            getColor: [255, 255, 255],\r\n            getSize: 30,\r\n            getAngle: 0,\r\n            getTextAnchor: \"middle\",\r\n            getAlignmentBaseline: \"center\",\r\n        });\r\n    }\r\n}\r\n","import { GeoJsonLayer } from 'deck.gl'\r\nimport { hexToRgb } from '../../../../utils/utils'\r\n\r\nexport default function GeojsonLayer({ data }) {\r\n  return new GeoJsonLayer({\r\n    id: 'GeojsonLayer',\r\n    data,\r\n    pickable: true,\r\n    wireframe: true,\r\n    stroked: false,\r\n    filled: true,\r\n    extruded: true,\r\n    lineWidthScale: 1,\r\n    getFillColor: (d) => hexToRgb(d.properties.fill),\r\n    getLineColor: (d) => hexToRgb(d.properties.stroke),\r\n    lineWidthMinPixels: 2,\r\n    getElevation: (d) => d.properties.height,\r\n  })\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport PaintBrush from './components/PaintBrush'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { listenToSlidersEvents } from '../../../redux/actions'\r\nimport {\r\n  _proccessAccessData,\r\n  _proccessGridData,\r\n  _postMapEditsToCityIO,\r\n} from '../../../utils/utils'\r\nimport { StaticMap } from 'react-map-gl'\r\nimport DeckGL from '@deck.gl/react'\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\nimport settings from '../../../settings/settings.json'\r\nimport AnimationComponent from './components/AnimationComponent'\r\nimport { updateSunDirection, _setupSunEffects } from '../../../utils/utils'\r\nimport {\r\n  AccessLayer,\r\n  AggregatedTripsLayer,\r\n  ABMLayer,\r\n  GridLayer,\r\n  TextualLayer,\r\n  GeojsonLayer,\r\n} from './deckglLayers'\r\n\r\nexport default function Map(props) {\r\n  const pitchMap = props.pitchMap\r\n  const zoomMap = props.zoomMap\r\n  const autoRotate = props.autoRotate\r\n  const onlyMap = props.onlyMap\r\n  const [draggingWhileEditing, setDraggingWhileEditing] = useState(false)\r\n  const [selectedCellsState, setSelectedCellsState] = useState(null)\r\n  const [viewState, setViewState] = useState(settings.map.initialViewState)\r\n  const [keyDownState, setKeyDownState] = useState(null)\r\n  const [mousePos, setMousePos] = useState(null)\r\n  const [mouseDown, setMouseDown] = useState(null)\r\n  const [hoveredObj, setHoveredObj] = useState(null)\r\n  const [access, setAccess] = useState(null)\r\n  const [textualData, setTextualData] = useState(null)\r\n\r\n  const [geojsonData, setGeojsonData] = useState(null)\r\n\r\n  const [GEOGRID, setGEOGRID] = useState(null)\r\n  const [ABM, setABM] = useState({})\r\n  const [loaded, setLoaded] = useState(false)\r\n  const effectsRef = useRef()\r\n  const deckGL = useRef()\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const pickingRadius = 40\r\n\r\n  const [\r\n    cityioData,\r\n    sliders,\r\n    menu,\r\n\r\n    selectedType,\r\n    ABMmode,\r\n  ] = useSelector((state) => [\r\n    state.CITYIO,\r\n    state.SLIDERS,\r\n    state.MENU,\r\n    state.SELECTED_TYPE,\r\n    state.ABM_MODE,\r\n  ])\r\n\r\n  var ABMOn = menu.includes('ABM')\r\n  if (autoRotate) {\r\n    var rotateOn = autoRotate;\r\n  } else {\r\n    var rotateOn = menu.includes('ROTATE')\r\n  }\r\n  var shadowsOn = menu.includes('SHADOWS')\r\n  var editOn = menu.includes('EDIT')\r\n  var resetViewOn = menu.includes('RESET_VIEW')\r\n\r\n  useEffect(() => {\r\n    console.log(9283);\r\n    // fix deck view rotate\r\n    _rightClickViewRotate()\r\n    // setup sun effects\r\n    _setupSunEffects(effectsRef, cityioData.GEOGRID.properties.header)\r\n    // zoom map on CS table location\r\n    _setViewStateToTableHeader()\r\n    setLoaded(true)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!loaded) return\r\n    updateSunDirection(sliders.time[1], effectsRef)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [sliders.time])\r\n\r\n  useEffect(() => {\r\n    if (!loaded) return\r\n    let shadowColor = shadowsOn ? [0, 0, 0, 0.5] : [0, 0, 0, 0]\r\n    effectsRef.current[0].shadowColor = shadowColor\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [shadowsOn])\r\n\r\n  useEffect(() => {\r\n    setGEOGRID(_proccessGridData(cityioData))\r\n\r\n    if (cityioData.access) {\r\n      setAccess(_proccessAccessData(cityioData.access))\r\n    }\r\n\r\n    if (cityioData.textual) {\r\n      setTextualData(cityioData.textual)\r\n    }\r\n\r\n    if (cityioData.geojson) {\r\n      setGeojsonData(cityioData.geojson)\r\n    }\r\n\r\n    if (cityioData.ABM2) {\r\n      setABM(cityioData.ABM2)\r\n    }\r\n  }, [cityioData])\r\n\r\n  useEffect(() => {\r\n    if (!loaded) return\r\n    if (!editOn) {\r\n      let dataProps = []\r\n\r\n      for (let i = 0; i < GEOGRID.features.length; i++) {\r\n        dataProps[i] = GEOGRID.features[i].properties\r\n      }\r\n      _postMapEditsToCityIO(dataProps, cityioData.tableName, '/GEOGRIDDATA')\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [editOn])\r\n\r\n  useEffect(() => {\r\n    if (!loaded) return\r\n    _setViewStateToTableHeader()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [resetViewOn])\r\n\r\n  const onViewStateChange = ({ viewState }) => {\r\n    setViewState(viewState)\r\n  }\r\n\r\n  // /**\r\n  //  * resets the camera viewport\r\n  //  * to cityIO header data\r\n  //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\r\n  //  */\r\n\r\n  const _setViewStateToTableHeader = () => {\r\n    const header = cityioData.GEOGRID.properties.header\r\n\r\n    setViewState({\r\n      ...viewState,\r\n      longitude: header.longitude,\r\n      latitude: header.latitude,\r\n      zoom: zoomMap ?? 14,\r\n      pitch: pitchMap ?? 0,\r\n      bearing: 360 - header.rotation,\r\n      orthographic: true,\r\n    })\r\n  }\r\n\r\n  // /**\r\n  //  * Description. fix deck issue\r\n  //  * with rotate right botton\r\n  //  */\r\n  const _rightClickViewRotate = () => {\r\n    document\r\n      .getElementById('deckgl-wrapper')\r\n      .addEventListener('contextmenu', (evt) => evt.preventDefault())\r\n  }\r\n\r\n  const layersKey = {\r\n    ABM: ABMLayer({\r\n      data: ABM.trips,\r\n      cityioData,\r\n      ABMmode,\r\n      zoomLevel: viewState.zoom,\r\n      sliders,\r\n    }),\r\n    AGGREGATED_TRIPS: AggregatedTripsLayer({\r\n      data: ABM.trips,\r\n      cityioData,\r\n      ABMmode,\r\n    }),\r\n    GRID: GridLayer({\r\n      data: GEOGRID,\r\n      editOn: menu.includes('EDIT'),\r\n      state: {\r\n        selectedType,\r\n        keyDownState,\r\n        selectedCellsState,\r\n        pickingRadius,\r\n      },\r\n      updaters: {\r\n        setSelectedCellsState,\r\n        setDraggingWhileEditing,\r\n        setHoveredObj,\r\n      },\r\n      deckGL,\r\n    }),\r\n    ACCESS: AccessLayer({\r\n      data: access,\r\n      cellSize: cityioData.GEOGRID?.properties?.header.cellSize,\r\n    }),\r\n    TEXTUAL: TextualLayer({\r\n      data: textualData && textualData,\r\n      coordinates: GEOGRID,\r\n    }),\r\n\r\n    GEOJSON: GeojsonLayer({\r\n      data: geojsonData && geojsonData,\r\n    }),\r\n  }\r\n\r\n  const layerOrder = [\r\n    'TEXTUAL',\r\n    'ABM',\r\n    'AGGREGATED_TRIPS',\r\n    'GEOJSON',\r\n    'GRID',\r\n    'ACCESS',\r\n  ]\r\n\r\n  const _renderLayers = () => {\r\n    let layers = []\r\n    for (var layer of layerOrder) {\r\n      if (menu.includes(layer)) {\r\n        layers.push(layersKey[layer])\r\n      }\r\n    }\r\n    return layers\r\n  }\r\n  return (\r\n    <div\r\n      className=\"baseMap\"\r\n      onKeyDown={(e) => {\r\n        setKeyDownState(e.nativeEvent.key)\r\n      }}\r\n      onKeyUp={() => setKeyDownState(null)}\r\n      onMouseMove={(e) => setMousePos(e.nativeEvent)}\r\n      onMouseUp={() => setMouseDown(false)}\r\n      onMouseDown={() => setMouseDown(true)}\r\n    >\r\n      <PaintBrush\r\n        editOn={editOn}\r\n        mousePos={mousePos}\r\n        selectedType={selectedType}\r\n        pickingRadius={pickingRadius}\r\n        mouseDown={mouseDown}\r\n        hoveredObj={hoveredObj}\r\n      />\r\n      <AnimationComponent\r\n        toggles={{ ABMOn, rotateOn }}\r\n        state={{ sliders, viewState }}\r\n        updaters={{\r\n          listenToSlidersEvents,\r\n          updateSunDirection,\r\n          setViewState,\r\n        }}\r\n        dispatch={dispatch}\r\n      />\r\n\r\n      <DeckGL\r\n        ref={deckGL}\r\n        viewState={viewState}\r\n        onViewStateChange={onViewStateChange}\r\n        layers={_renderLayers()}\r\n        effects={effectsRef.current}\r\n        controller={{\r\n          touchZoom: onlyMap ? false : true,\r\n          touchRotate: onlyMap ? false : true,\r\n          scrollZoom: onlyMap ? false : true,\r\n          dragPan: onlyMap ? false : !draggingWhileEditing,\r\n          dragRotate: onlyMap ? false : !draggingWhileEditing,\r\n          keyboard: false,\r\n        }}\r\n      >\r\n        <StaticMap\r\n          asyncRender={false}\r\n          dragRotate={true}\r\n          reuseMaps={true}\r\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n          mapStyle={autoRotate ? \"\" : settings.map.mapStyle.sat}\r\n          preventStyleDiffing={true}\r\n        />\r\n      </DeckGL>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CircularGridLines, RadarChart, DiscreteColorLegend } from \"react-vis\";\r\nimport \"react-vis/dist/style.css\";\r\nimport \"./Radar.css\";\r\n\r\nconst radarSize = 300;\r\nconst colorRange = [\"#ff5278\", \"#660016\"];\r\n\r\nexport default function Radar(props) {\r\n    const [radarData, setRadarData] = useState(null);\r\n\r\n    const createRadarData = (indicators) => {\r\n        let r = {};\r\n        let f = {};\r\n        let domains = [];\r\n        for (let i = 0; i < indicators.length; i++) {\r\n            if (indicators[i].viz_type === \"radar\") {\r\n                r[indicators[i].name] = [indicators[i].value];\r\n                f[indicators[i].name] = [indicators[i].ref_value];\r\n                indicators[i].domain = [0, 1];\r\n                domains.push(indicators[i]);\r\n            }\r\n        }\r\n        return { radarData: [r, f], domains: domains };\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log('props radar', props);\r\n        if (\r\n            props &&\r\n            props.cityioData &&\r\n            props.cityioData.indicators &&\r\n            props.cityioData.indicators.length > 0\r\n        ) {\r\n            console.log(121);\r\n            const d = createRadarData(props.cityioData.indicators);\r\n            setRadarData(d);\r\n        }\r\n    }, [props]);\r\n\r\n    return (\r\n        <div>\r\n            {(radarData && radarData.domains) ? (\r\n                <>\r\n                    <RadarChart\r\n                        className=\"Radar blur\"\r\n                        animation\r\n                        data={radarData.radarData}\r\n                        domains={radarData.domains}\r\n                        colorRange={colorRange}\r\n                        style={{\r\n                            polygons: {\r\n                                fillOpacity: 0.2,\r\n                                strokeWidth: 2,\r\n                            },\r\n                            axes: {\r\n                                text: {\r\n                                    opacity: 0,\r\n                                    fontWeight: 700,\r\n                                    fill: \"white\",\r\n                                    fontFamily: \"Roboto Mono\",\r\n                                },\r\n                                strokeWidth: 0,\r\n                            },\r\n                            labels: {\r\n                                fontFamily: \"Roboto Mono\",\r\n\r\n                                textAnchor: \"middle\",\r\n                                fontSize: 10,\r\n                                fill: \"white\",\r\n                            },\r\n                        }}\r\n                        margin={{\r\n                            left: radarSize / 6,\r\n                            top: radarSize / 6,\r\n                            bottom: radarSize / 6,\r\n                            right: radarSize / 6,\r\n                        }}\r\n                        width={radarSize}\r\n                        height={radarSize}\r\n                    >\r\n                        <CircularGridLines\r\n                            style={{\r\n                                fill: \"white\",\r\n                                fillOpacity: 0.1,\r\n                                backgroundColor: \"#FFF\",\r\n                                opacity: 0.5,\r\n                                stroke: \"white\",\r\n                                width: 0.1,\r\n                            }}\r\n                            tickValues={[...new Array(11)].map(\r\n                                (v, i) => i / 10 - 1\r\n                            )}\r\n                        />\r\n                    </RadarChart>\r\n                    <DiscreteColorLegend\r\n                        items={[\"Design\", \"Reference\"]}\r\n                        colors={colorRange}\r\n                        style={{\r\n                            fontFamily: \"Roboto Mono\",\r\n                        }}\r\n                    />\r\n                </>\r\n            ): (<>\r\n                    <RadarChart\r\n                        className=\"Radar blur\"\r\n                        animation\r\n                        data={[]}\r\n                        domains={[]}\r\n                        colorRange={colorRange}\r\n                        style={{\r\n                            polygons: {\r\n                                fillOpacity: 0.2,\r\n                                strokeWidth: 2,\r\n                            },\r\n                            axes: {\r\n                                text: {\r\n                                    opacity: 0,\r\n                                    fontWeight: 700,\r\n                                    fill: \"white\",\r\n                                    fontFamily: \"Roboto Mono\",\r\n                                },\r\n                                strokeWidth: 0,\r\n                            },\r\n                            labels: {\r\n                                fontFamily: \"Roboto Mono\",\r\n\r\n                                textAnchor: \"middle\",\r\n                                fontSize: 10,\r\n                                fill: \"white\",\r\n                            },\r\n                        }}\r\n                        margin={{\r\n                            left: radarSize / 6,\r\n                            top: radarSize / 6,\r\n                            bottom: radarSize / 6,\r\n                            right: radarSize / 6,\r\n                        }}\r\n                        width={radarSize}\r\n                        height={radarSize}\r\n                    >\r\n                        <CircularGridLines\r\n                            style={{\r\n                                fill: \"white\",\r\n                                fillOpacity: 0.1,\r\n                                backgroundColor: \"#FFF\",\r\n                                opacity: 0.5,\r\n                                stroke: \"white\",\r\n                                width: 0.1,\r\n                            }}\r\n                            tickValues={[...new Array(11)].map(\r\n                                (v, i) => i / 10 - 1\r\n                            )}\r\n                        />\r\n                    </RadarChart>\r\n                    <DiscreteColorLegend\r\n                        items={[\"Design\", \"Reference\"]}\r\n                        colors={colorRange}\r\n                        style={{\r\n                            fontFamily: \"Roboto Mono\",\r\n                        }}\r\n                    />\r\n                </>)}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    FlexibleWidthXYPlot,\r\n    XAxis,\r\n    YAxis,\r\n    VerticalBarSeries,\r\n} from \"react-vis\";\r\nimport \"react-vis/dist/style.css\";\r\nimport { Typography, Box } from \"@material-ui/core\";\r\n\r\nexport default function BarChart(props) {\r\n    const radarSize = 250;\r\n\r\n    /**\r\n   data format \r\n    [\r\n    { x: 2, y: 10 },\r\n    { x: 4, y: 5 },\r\n    { x: 12, y: 15 },\r\n    ]\r\n     */\r\n    const defaultData = [\r\n        { x: 0, y: 0 },\r\n        { x: 0, y: 0 },\r\n        { x: 0, y: 0 },\r\n    ];\r\n\r\n    const [barChartData, setBarChartData] = useState(defaultData);\r\n    const [hoveredNode, setHoveredNode] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            props &&\r\n            props.cityioData &&\r\n            props.cityioData.indicators &&\r\n            props.cityioData.indicators.length > 0\r\n        ) {\r\n            const d = generateData(props.cityioData.indicators);\r\n\r\n            setBarChartData(d.barChartData);\r\n        }\r\n    }, [props]);\r\n\r\n    const generateData = (indicators) => {\r\n        let dataArr = [];\r\n\r\n        for (let i = 0; i < indicators.length; i++) {\r\n            if (indicators[i].viz_type === \"bar\") {\r\n                dataArr.push({\r\n                    x: indicators[i].name,\r\n                    y: indicators[i].value,\r\n                });\r\n            }\r\n        }\r\n\r\n        return {\r\n            barChartData: dataArr,\r\n        };\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {barChartData && (\r\n                <>\r\n                    <Box flexDirection=\"column\">\r\n                        <Box alignContent=\"center\" p={3}>\r\n                            <FlexibleWidthXYPlot\r\n                                opacity={0.2}\r\n                                xType=\"ordinal\"\r\n                                width={radarSize}\r\n                                height={radarSize}\r\n                                stackBy=\"y\"\r\n                                yDomain={[0, 1]}\r\n                            >\r\n                                <XAxis\r\n                                    style={{\r\n                                        text: {\r\n                                            fill: \"#FFF\",\r\n                                            fontFamily: \"Roboto Mono\",\r\n                                        },\r\n                                    }}\r\n                                    tickLabelAngle={90}\r\n                                />\r\n                                <YAxis style={{ text: { fill: \"#FFF\" } }} />\r\n                                <VerticalBarSeries\r\n                                    animation={true}\r\n                                    onValueMouseOver={(d) => {\r\n                                        setHoveredNode(d);\r\n                                    }}\r\n                                    data={barChartData}\r\n                                />\r\n                            </FlexibleWidthXYPlot>\r\n                        </Box>\r\n                        <Box alignContent=\"center\">\r\n                            {hoveredNode && (\r\n                                <>\r\n                                    <Typography variant=\"caption\" gutterBottom>\r\n                                        {hoveredNode.x}\r\n                                    </Typography>\r\n                                    <Box m={3} />\r\n                                    <Typography gutterBottom>\r\n                                        {hoveredNode.y}\r\n                                    </Typography>\r\n                                </>\r\n                            )}\r\n                        </Box>\r\n                    </Box>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { rgbToHex } from \"../../../../utils/utils\";\r\nimport { RadialChart, Hint } from \"react-vis\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\r\n\r\nexport default function AreaCalc(props) {\r\n    const radialRadius = 250;\r\n    const [hoveredRadial, setHoveredRadial] = useState(false);\r\n    const [areaData, setAreaData] = useState(null);\r\n    const header = props.cityioData.GEOGRID?.properties?.header;\r\n    useEffect(() => {\r\n        const calcArea = () => {\r\n            let gridProps = props.cityioData.GEOGRID.properties;\r\n            let cellSize = gridProps.header.cellSize;\r\n            let geoGridData = props.cityioData.GEOGRIDDATA;\r\n\r\n            let calcAreaObj = {};\r\n            geoGridData.forEach((gridCellData) => {\r\n                let typeName = gridCellData.name;\r\n                if (\r\n                    //    if this type is not null\r\n                    gridCellData.name !== \"None\"\r\n                ) {\r\n                    if (calcAreaObj.hasOwnProperty(typeName)) {\r\n                        calcAreaObj[typeName].count =\r\n                            calcAreaObj[typeName].count + 1;\r\n                        // avoid landuse with no height\r\n                        let height =\r\n                            gridCellData.height < 1 ? 1 : gridCellData.height;\r\n                        calcAreaObj[typeName].area =\r\n                            calcAreaObj[typeName].area + height * cellSize;\r\n                    } else {\r\n                        calcAreaObj[typeName] = {};\r\n                        calcAreaObj[typeName].area = 0;\r\n                        calcAreaObj[typeName].count = 0;\r\n                        calcAreaObj[typeName].name = typeName;\r\n                        calcAreaObj[typeName].color = rgbToHex(\r\n                            gridCellData.color[0],\r\n                            gridCellData.color[1],\r\n                            gridCellData.color[2]\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n            //  convert to react-vis happy data format\r\n            let radialData = [];\r\n            for (const k in calcAreaObj) {\r\n                radialData.push(calcAreaObj[k]);\r\n            }\r\n\r\n            let data = {\r\n                children: radialData,\r\n                color: 1,\r\n            };\r\n            console.log('radialData', radialData);\r\n\r\n            return data;\r\n        };\r\n        const calcAreaForHCM = () => {\r\n            let gridProps = props.cityioData.GEOGRID.properties;\r\n            let cellSize = gridProps.header.cellSize;\r\n            let geoGridData = props.cityioData.GEOGRIDDATA;\r\n            // console.log('geoGridData',geoGridData);\r\n\r\n            let calcAreaObj = {};\r\n            geoGridData.forEach((gridCellData) => {\r\n                let typeName = gridCellData.LandUseTyp;\r\n                let typeCode = gridCellData.TypeCode;\r\n                let color = (gridCellData.RGB).split(',');\r\n                let shapeArea = Math.round(gridCellData.ShapeArea * 100) / 100;\r\n                if (\r\n                    //    if this type is not null\r\n                    gridCellData.TypeCode !== \"None\"\r\n                ) {\r\n                    if (calcAreaObj.hasOwnProperty(typeCode)) {\r\n                        // calcAreaObj[typeCode].area = calcAreaObj[typeCode].area + gridCellData.Shape_Area;\r\n                        calcAreaObj[typeCode].area = calcAreaObj[typeCode].area + shapeArea;\r\n                    } else {\r\n                        calcAreaObj[typeCode] = {};\r\n                        // calcAreaObj[typeCode].area = gridCellData.Shape_Area;\r\n                        calcAreaObj[typeCode].area = shapeArea;\r\n                        calcAreaObj[typeCode].name = typeName;\r\n                        calcAreaObj[typeCode].color = rgbToHex(\r\n                            parseInt(color[0]),\r\n                            parseInt(color[1]),\r\n                            parseInt(color[2]),\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n            //  convert to react-vis happy data format\r\n            let radialData = [];\r\n            for (const k in calcAreaObj) {\r\n                radialData.push(calcAreaObj[k]);\r\n            }\r\n\r\n            let data = {\r\n                children: radialData,\r\n                color: 1,\r\n            };\r\n            // console.log('radialData', radialData);\r\n\r\n            return data;\r\n        };\r\n        let d;\r\n        if (header.tableName && header.tableName.includes('hcm_')) {\r\n            d = calcAreaForHCM();\r\n        }\r\n        else {\r\n            d = calcArea();\r\n        }\r\n        setAreaData(d);\r\n    }, [props]);\r\n\r\n    return (\r\n        <List>\r\n            {areaData && areaData.children && (\r\n                <ListItem alignItems=\"center\">\r\n                    <RadialChart\r\n                        colorType=\"literal\"\r\n                        animation={true}\r\n                        className={\"donut-chart-example\"}\r\n                        innerRadius={radialRadius / 2 - radialRadius / 5}\r\n                        radius={radialRadius / 2}\r\n                        getLabel={(d) => d.name}\r\n                        labelsRadiusMultiplier={0.95}\r\n                        labelsStyle={{\r\n                            textAnchor: \"middle\",\r\n                            font: \"sans-serif\",\r\n                            fontSize: 11,\r\n                            fill: \"#FFF\",\r\n                            textShadow: \"2px 2px 2px #000\",\r\n                            fontFamily: \"Roboto Mono\",\r\n                        }}\r\n                        showLabels\r\n                        getAngle={(d) => d.area}\r\n                        data={areaData.children}\r\n                        onValueMouseOver={(evt) => setHoveredRadial(evt)}\r\n                        onSeriesMouseOut={() => setHoveredRadial(false)}\r\n                        width={radialRadius}\r\n                        height={radialRadius}\r\n                        padAngle={0.01}\r\n                    >\r\n                        {hoveredRadial !== false && (\r\n                            <Hint value={hoveredRadial}>\r\n                                <div\r\n                                    style={{\r\n                                        background: \"rgba(0,0,0,0.8)\",\r\n                                        fontSize: 14,\r\n                                    }}\r\n                                >\r\n                                    <Typography\r\n                                        variant={\"caption\"}\r\n                                        gutterBottom\r\n                                    >\r\n                                        Area: {hoveredRadial.area} sqm\r\n                                    </Typography>\r\n                                </div>\r\n                            </Hint>\r\n                        )}\r\n                    </RadialChart>\r\n                </ListItem>\r\n            )}\r\n\r\n            {hoveredRadial.name && (\r\n                <List>\r\n                    <ListItem>\r\n                        <Typography variant=\"caption\">\r\n                            {hoveredRadial.name}\r\n                        </Typography>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <Typography>{hoveredRadial.area} sqm</Typography>\r\n                    </ListItem>\r\n                </List>\r\n            )}\r\n        </List>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { List, ListItem, Divider } from \"@material-ui/core\";\r\nimport Radar from \"./Radar\";\r\nimport BarChart from \"./BarChart\";\r\nimport AreaCalc from \"./AreaCalc\";\r\n\r\nfunction VisContainer(props) {\r\n    return (\r\n        <>\r\n            {props.cityIOdata && (\r\n                <List>\r\n                    <ListItem style={{justifyContent: \"center\"}}>\r\n                        <AreaCalc cityioData={props.cityIOdata} />\r\n                    </ListItem>\r\n\r\n                    <Divider />\r\n\r\n                    <ListItem style={{justifyContent: \"center\"}}>\r\n                        <Radar cityioData={props.cityIOdata} />\r\n                    </ListItem>\r\n\r\n                    <Divider />\r\n\r\n                    <ListItem style={{justifyContent: \"center\"}}>\r\n                        <BarChart cityioData={props.cityIOdata} />\r\n                    </ListItem>\r\n                </List>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default VisContainer;\r\n","import MenuContainer from './MenuContainer'\r\nimport MapContainer from './DeckglMap'\r\nimport LoadingSpinner from './CityIO/LoadingSpinner'\r\nimport VisContainer from './VisContainer'\r\nimport {\r\n  makeStyles,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n} from '@material-ui/core'\r\nimport Page from '../../layouts/Page'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 'auto',\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n}))\r\n\r\n\r\nexport default function CSjsMain(props) {\r\n  const classes = useStyles()\r\n  const tableName = props.tableName\r\n  const cityIOdata = props.cityIOdata\r\n\r\n  return (\r\n    <Page className={classes.root} title=\"CitySCopeJS\">\r\n      <LoadingSpinner />\r\n      <Container maxWidth={null}>\r\n        <Grid container spacing={5}>\r\n          <Grid item xs={6} l={3} md={3} xl={2} container>\r\n            <Grid item container direction=\"column\" spacing={2}>\r\n              <Grid item xs={12} l={12} md={12} xl={12}>\r\n                <Card\r\n                  elevation={15}\r\n                  style={{\r\n                    maxHeight: '85vh',\r\n                    overflow: 'auto',\r\n                  }}\r\n                >\r\n                  <CardContent>\r\n                    <MenuContainer tableName={tableName} />\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item xs={6} l={6} md={6} xl={8}>\r\n            <Card\r\n              elevation={15}\r\n              style={{\r\n                height: '85vh',\r\n                width: '100%',\r\n                position: 'relative',\r\n              }}\r\n            >\r\n              {/* <Test/> */}\r\n              <MapContainer />\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={6} l={3} md={3} xl={2}>\r\n            <Card\r\n              elevation={15}\r\n              style={{\r\n                maxHeight: '85vh',\r\n                overflow: 'auto',\r\n              }}\r\n            >\r\n              <VisContainer cityIOdata={cityIOdata} />\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Page>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport CityIO from './CityIO/cityIO'\r\nimport CityIOviewer from '../CityIOviewer'\r\nimport LoadingSpinner from './CityIO/LoadingSpinner'\r\nimport CSjsMain from './CSjsMain'\r\n\r\nexport default function CityScopeJS() {\r\n  // get the table name for cityIO comp\r\n  const [tableName, setTableName] = useState()\r\n  const [isDone, setIsdone] = useState(false)\r\n  // on init, get the adress URL\r\n  // to search for  a table\r\n  useEffect(() => {\r\n    let url = window.location.toString()\r\n    let pre = 'cityscope='\r\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length).toLowerCase()\r\n\r\n    \r\n    // check URL for proper CS project link\r\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\r\n      setTableName(cityscopePrjName)\r\n    } else {\r\n      /** if failed to get table name from\r\n       * url location, resote to the\r\n       * CityIO viewer\r\n       *\r\n       */\r\n      setIsdone(true)\r\n    }\r\n  }, [])\r\n\r\n  // wait for 'ready' flag from cityIO when app is ready to start\r\n  const isReady = useSelector((state) => state.READY)\r\n  const cityIOdata = useSelector((state) => state.CITYIO)\r\n\r\n  return (\r\n    <>\r\n      {tableName && <CityIO tableName={tableName} />}\r\n      {isReady && <CSjsMain cityIOdata={cityIOdata} tableName={tableName}/>}\r\n      {isDone && <CityIOviewer />}\r\n      <LoadingSpinner />\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getCityioData,\r\n    setReadyState,\r\n    setLoadingState,\r\n    addLoadingModules,\r\n    removeLoadingModules,\r\n} from \"../../../redux/actions\";\r\nimport settings from \"../../../settings/settings.json\";\r\n\r\nconst getAPICall = async (URL) => {\r\n    try {\r\n        // ! should add 'retry' here\r\n        // ! https://stackoverflow.com/questions/56074531/how-to-retry-5xx-requests-using-axios\r\n        const response = await axios.get(URL);\r\n        return response.data;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nexport default function CityIO(props) {\r\n    const { tableName } = props;\r\n    const [hashId, setHashId] = useState(null);\r\n    const [hashes, setHashes] = useState({});\r\n    const cityioURL = `${settings.cityIO.baseURL}${tableName}/`;\r\n    const cityioData = useSelector((state) => state.CITYIO);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    /**\r\n     * start fetching API hashes to check for new data\r\n     */\r\n    useEffect(() => {\r\n        const timer = setTimeout(update, settings.cityIO.interval);\r\n        console.log(\"reading cityIO every -> \" + settings.cityIO.interval + \"ms\");\r\n        return () => clearTimeout(timer);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    async function update() {\r\n        // recursively get hashes\r\n        const newHashId = await getAPICall(cityioURL + \"/meta/id/\");\r\n        if (hashId !== newHashId) {\r\n            setHashId(newHashId);\r\n        }\r\n        setTimeout(update, settings.cityIO.interval);\r\n    }\r\n\r\n    async function getModules() {\r\n        const newHashes = await getAPICall(cityioURL + \"/meta/hashes/\");\r\n        const promises = [];\r\n        const loadingModules = [];\r\n        const pickedModules = settings.cityIO.cityIOmodules.map((x) => x.name);\r\n        // for each of the modules in settings, add api call to promises\r\n        pickedModules.forEach((module) => {\r\n            if (hashes[module] !== newHashes[module]) {\r\n                promises.push(getAPICall(`${cityioURL}/${module}/`));\r\n                loadingModules.push(module);\r\n            } else {\r\n                promises.push(null);\r\n            }\r\n        });\r\n        dispatch(addLoadingModules(loadingModules));\r\n        const modules = await Promise.all(promises);\r\n        setHashes(newHashes);\r\n\r\n        // update cityio object with modules data\r\n        const modulesData = pickedModules.reduce((obj, k, i) => {\r\n            if (modules[i]) {\r\n                console.log(`updating ${k}`);\r\n                return { ...obj, [k]: modules[i] };\r\n            } else {\r\n                return obj;\r\n            }\r\n        }, cityioData);\r\n        modulesData.tableName = tableName;\r\n\r\n        dispatch(removeLoadingModules(loadingModules));\r\n\r\n        // send to cityio\r\n        dispatch(getCityioData(modulesData));\r\n        console.log(\"done updating from cityIO\");\r\n\r\n        // initializes rendering of Menu and Map containers\r\n        dispatch(setReadyState(true));\r\n        dispatch(setLoadingState(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        //! only update if hashId changes\r\n        if (!hashId) {\r\n            return;\r\n        }\r\n        // reset the state of loading flag\r\n        dispatch(setLoadingState(true));\r\n        \r\n        getModules();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [hashId]);\r\n\r\n    return null;\r\n}\r\n","import { HeatmapLayer } from \"deck.gl\";\r\nimport settings from \"../../../../../settings/settings.json\";\r\n\r\nexport default function AccessLayer({ active, data, accessToggle }) {\r\n    return new HeatmapLayer({\r\n        visible: active,\r\n        id: \"ACCESS\",\r\n        colorRange: settings.map.layers.heatmap.colors,\r\n        radiusPixels: 200,\r\n        opacity: 0.5,\r\n        threshold: 0.5,\r\n        data,\r\n        getPosition: (d) => d.coordinates,\r\n        getWeight: (d) => d.values[accessToggle],\r\n        updateTriggers: {\r\n            getWeight: [accessToggle],\r\n        },\r\n    });\r\n}\r\n","import { PathLayer } from \"deck.gl\";\r\nimport { hexToRgb } from \"../../../../../utils/utils\";\r\n\r\nexport default function AggregatedTripsLayer({\r\n    active,\r\n    data,\r\n    cityioData,\r\n    ABMmode,\r\n}) {\r\n    return new PathLayer({\r\n        visible: active,\r\n        id: \"AGGREGATED_TRIPS\",\r\n        _shadow: false,\r\n        data,\r\n        getPath: (d) => {\r\n            const noisePath =\r\n                Math.random() < 0.5\r\n                    ? Math.random() * 0.00005\r\n                    : Math.random() * -0.00005;\r\n            for (let i in d.path) {\r\n                d.path[i][0] = d.path[i][0] + noisePath;\r\n                d.path[i][1] = d.path[i][1] + noisePath;\r\n                d.path[i][2] = d.mode[0] * 2;\r\n            }\r\n            return d.path;\r\n        },\r\n        getColor: (d) => {\r\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\r\n            return col;\r\n        },\r\n        opacity: 0.2,\r\n        getWidth: 1.5,\r\n\r\n        updateTriggers: {\r\n            getColor: ABMmode,\r\n        },\r\n        transitions: {\r\n            getColor: 500,\r\n        },\r\n    });\r\n}\r\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\r\nimport { hexToRgb } from \"../../../../../utils/utils\";\r\n\r\n//  * remap line width\r\nconst _remapValues = (value) => {\r\n    let remap =\r\n        value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\r\n    return remap;\r\n};\r\n\r\nexport default function ABMLayer({\r\n    active,\r\n    data,\r\n    cityioData,\r\n    ABMmode,\r\n    zoomLevel,\r\n    time,\r\n}) {\r\n    return new TripsLayer({\r\n        id: \"ABM\",\r\n        data,\r\n        getPath: (d) => d.path,\r\n        getTimestamps: (d) => d.timestamps,\r\n        getColor: (d) => {\r\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\r\n            return col;\r\n        },\r\n        visible: active,\r\n        getWidth: 1,\r\n        widthScale: _remapValues(zoomLevel),\r\n        opacity: 0.8,\r\n        rounded: true,\r\n        trailLength: 500,\r\n        currentTime: time,\r\n\r\n        updateTriggers: {\r\n            getColor: ABMmode,\r\n        },\r\n        transitions: {\r\n            getColor: 500,\r\n        },\r\n    });\r\n}\r\n","import { GeoJsonLayer } from \"deck.gl\";\r\n\r\nexport default function GridLayer({ active, data }) {\r\n    return new GeoJsonLayer({\r\n        visible: active,\r\n        id: \"GRID\",\r\n        data,\r\n        extruded: true,\r\n        wireframe: true,\r\n        lineWidthScale: 1,\r\n        lineWidthMinPixels: 2,\r\n        getElevation: (d) => d.properties.height,\r\n        getFillColor: (d) => d.properties.color,\r\n\r\n        transitions: {\r\n            getFillColor: 500,\r\n            getElevation: 500,\r\n        },\r\n    });\r\n}\r\n","import { useState, useEffect, useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport {\r\n  _proccessAccessData,\r\n  _proccessGridData,\r\n  _setupSunEffects,\r\n  updateSunDirection,\r\n} from '../../../../utils/utils'\r\nimport { StaticMap } from 'react-map-gl'\r\nimport DeckGL from '@deck.gl/react'\r\nimport 'mapbox-gl/dist/mapbox-gl.css'\r\nimport settings from '../../../../settings/settings.json'\r\nimport {\r\n  AccessLayer,\r\n  AggregatedTripsLayer,\r\n  ABMLayer,\r\n  GridLayer,\r\n} from './deckglLayers'\r\n\r\nexport default function PrjDeckGLMap(props) {\r\n  const [viewState, setViewState] = useState(settings.map.initialViewState)\r\n  const [access, setAccess] = useState(null)\r\n  const [GEOGRID, setGEOGRID] = useState(null)\r\n  const [ABM, setABM] = useState({})\r\n  const effectsRef = useRef()\r\n  const deckGL = useRef()\r\n  const [cityioData] = useSelector((state) => [state.CITYIO])\r\n  const viewSettings = useSelector((state) => state.UI_WEBSOCKET_DATA)\r\n\r\n  useEffect(() => {\r\n    if (!effectsRef.current) {\r\n      return\r\n    }\r\n    updateSunDirection(props.viewSettings.time, effectsRef)\r\n  }, [props.viewSettings])\r\n\r\n  const _setViewStateToTableHeader = () => {\r\n    const header = cityioData.GEOGRID.properties.header\r\n\r\n    setViewState({\r\n      ...viewState,\r\n      longitude: header.longitude,\r\n      latitude: header.latitude,\r\n      zoom: 15,\r\n      pitch: 0,\r\n      bearing: 360 - header.rotation,\r\n      orthographic: true,\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    // fix deck view rotate\r\n    _rightClickViewRotate()\r\n    // setup sun effects\r\n    _setupSunEffects(effectsRef, cityioData.GEOGRID.properties.header)\r\n\r\n    // on init, check if prev. local storage with\r\n    // view state exist. If so, load it.\r\n    if (localStorage.getItem('deckGLviewState')) {\r\n      console.log('loading prev. deckGLviewState...')\r\n      let vs = localStorage.getItem('deckGLviewState')\r\n      setViewState(JSON.parse(vs))\r\n    } else {\r\n      // zoom map on CS table location\r\n      _setViewStateToTableHeader()\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    effectsRef.current[0].shadowColor = [0, 0, 0, 1]\r\n  }, [cityioData.GEOGRID.properties.header])\r\n\r\n  useEffect(() => {\r\n    setGEOGRID(_proccessGridData(cityioData))\r\n    if (cityioData.access) {\r\n      setAccess(_proccessAccessData(cityioData))\r\n    }\r\n    if (cityioData.ABM2) {\r\n      setABM(cityioData.ABM2)\r\n    }\r\n  }, [cityioData])\r\n\r\n  const onViewStateChange = ({ viewState }) => {\r\n    //    save current view state to local sotrage\r\n    localStorage.setItem('deckGLviewState', JSON.stringify(viewState))\r\n\r\n    setViewState(viewState)\r\n  }\r\n\r\n  const _rightClickViewRotate = () => {\r\n    document\r\n      .getElementById('deckgl-wrapper')\r\n      .addEventListener('contextmenu', (evt) => evt.preventDefault())\r\n  }\r\n\r\n  const layersKey = {\r\n    ABM: ABMLayer({\r\n      active: viewSettings.ABMLayer.active,\r\n      data: ABM.trips,\r\n      cityioData: cityioData,\r\n      ABMmode: viewSettings.ABMLayer.ABMmode,\r\n      zoomLevel: viewSettings.ABMLayer.zoomLevel,\r\n      time: viewSettings.time,\r\n    }),\r\n    AGGREGATED_TRIPS: AggregatedTripsLayer({\r\n      active: viewSettings.AggregatedTripsLayer.active,\r\n      data: ABM.trips,\r\n      cityioData: cityioData,\r\n      ABMmode: viewSettings.AggregatedTripsLayer.ABMmode,\r\n    }),\r\n    GRID: GridLayer({\r\n      active: viewSettings.GridLayer.active,\r\n      data: GEOGRID,\r\n    }),\r\n    ACCESS: AccessLayer({\r\n      active: viewSettings.AccessLayer.active,\r\n      data: access,\r\n      accessToggle: viewSettings.AccessLayer.accessToggle,\r\n    }),\r\n  }\r\n\r\n  const layerOrder = ['ABM', 'AGGREGATED_TRIPS', 'GRID', 'ACCESS']\r\n\r\n  const _renderLayers = () => {\r\n    let layers = []\r\n    for (var layer of layerOrder) {\r\n      layers.push(layersKey[layer])\r\n    }\r\n    return layers\r\n  }\r\n\r\n  return (\r\n    <DeckGL\r\n      ref={deckGL}\r\n      viewState={viewState}\r\n      onViewStateChange={onViewStateChange}\r\n      layers={_renderLayers()}\r\n      effects={effectsRef.current}\r\n      controller={{\r\n        keyboard: false,\r\n      }}\r\n    >\r\n      <StaticMap\r\n        asyncRender={false}\r\n        dragRotate={true}\r\n        reuseMaps={true}\r\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n        mapStyle={settings.map.mapStyle.sat}\r\n        preventStyleDiffing={true}\r\n      />\r\n    </DeckGL>\r\n  )\r\n}\r\n","import { Matrix3d, RectPoints, Vector } from \"./Keystoner\";\r\nconst { solve } = require(\"numeric\");\r\n\r\nexport const round = (num: number, precision: number) => {\r\n    var factor = Math.pow(10, precision);\r\n    var tempNumber = num * factor;\r\n    var roundedTempNumber = Math.round(tempNumber);\r\n    return roundedTempNumber / factor;\r\n};\r\n\r\n// tslint:disable-next-line:no-any\r\nexport const range = (num: number) =>\r\n    (Array as any)(num)\r\n        .fill()\r\n        .map((_: any, i: any) => i * i);\r\n\r\nexport const transformPointsToMatrix = (\r\n    sourcePoints: RectPoints,\r\n    targetPoints: RectPoints\r\n): Matrix3d => {\r\n    const a: number[][] = [];\r\n    const b: number[] = [];\r\n\r\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\r\n        const [fromX, fromY] = sourcePoints[i];\r\n        const [toX, toY] = targetPoints[i];\r\n\r\n        a.push(\r\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\r\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\r\n        );\r\n\r\n        b.push(toX, toY);\r\n    }\r\n\r\n    const h = solve(a, b, true);\r\n\r\n    return [\r\n        h[0],\r\n        h[3],\r\n        0,\r\n        h[6],\r\n        h[1],\r\n        h[4],\r\n        0,\r\n        h[7],\r\n        0,\r\n        0,\r\n        1,\r\n        0,\r\n        h[2],\r\n        h[5],\r\n        0,\r\n        1,\r\n    ].map((num) => round(num, 10)) as Matrix3d;\r\n};\r\n\r\nexport const matrixToTransform = (matrix: Matrix3d) =>\r\n    `matrix3d(${matrix.join(\", \")})`;\r\n\r\nexport const vectorToTransform = (vector: Vector) =>\r\n    `translate(${vector[0]}px, ${vector[1]}px)`;\r\n","import * as React from \"react\";\r\nimport { Anchor, Vector } from \"./Keystoner\";\r\nimport { vectorToTransform } from \"./util\";\r\n\r\nconst anchorSize = 20;\r\nconst halfAnchor = anchorSize / 1.5;\r\n\r\nconst styles = {\r\n    container: {\r\n        width: anchorSize,\r\n        height: anchorSize,\r\n        borderRadius: \"50%\",\r\n        position: \"absolute\" as \"absolute\",\r\n        border: \"1px solid white\",\r\n        cursor: \"move\",\r\n    },\r\n    \"top-left\": {\r\n        left: -halfAnchor,\r\n        top: -halfAnchor,\r\n    },\r\n    \"bottom-left\": {\r\n        left: -halfAnchor,\r\n        bottom: -halfAnchor,\r\n    },\r\n    \"top-right\": {\r\n        top: -halfAnchor,\r\n        right: -halfAnchor,\r\n    },\r\n    \"bottom-right\": {\r\n        bottom: -halfAnchor,\r\n        right: -halfAnchor,\r\n    },\r\n};\r\n\r\nexport interface Props {\r\n    position: Anchor;\r\n    onMouseEnter?: (position: Anchor) => void;\r\n    // tslint:disable-next-line:no-any\r\n    onMouseDown: (evt: any, position: Anchor) => void;\r\n    onMouseUp: (position: Anchor) => void;\r\n    translation: Vector;\r\n    style?: React.CSSProperties;\r\n    className?: string;\r\n}\r\n\r\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\r\n    position,\r\n    translation,\r\n    onMouseEnter,\r\n    onMouseDown,\r\n    onMouseUp,\r\n    className = \"\",\r\n    style = {},\r\n}) => (\r\n    <div\r\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\r\n        onMouseDown={(evt) => onMouseDown(evt, position)}\r\n        onMouseUp={() => onMouseUp(position)}\r\n        className={className}\r\n        style={{\r\n            ...styles.container,\r\n            ...styles[position],\r\n            ...style,\r\n            transform: vectorToTransform(translation),\r\n        }}\r\n    />\r\n);\r\n","import * as React from \"react\";\r\nimport { AnchorComponent } from \"./anchor\";\r\nimport {\r\n    matrixToTransform,\r\n    transformPointsToMatrix,\r\n    vectorToTransform,\r\n} from \"./util\";\r\n\r\n\r\n// Component interfaces\r\nexport interface Props {\r\n    style?: React.CSSProperties;\r\n    className?: string;\r\n    isEditMode?: boolean;\r\n    x?: number;\r\n    y?: number;\r\n    anchorStyle?: React.CSSProperties;\r\n    anchorClassName?: string;\r\n}\r\n\r\nexport interface Context {\r\n    isEditMode: boolean;\r\n}\r\n\r\nexport interface State {\r\n    matrix: Matrix3d;\r\n    translateDelta: { [key: string]: Vector };\r\n    sourcePoints?: RectPoints;\r\n    transformOrigin: Vector;\r\n    containerTranslate: Vector;\r\n}\r\n\r\nconst styles = {\r\n    container: {\r\n        position: \"relative\" as \"relative\",\r\n    },\r\n};\r\n\r\n// Sorted\r\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\r\nconst anchors: Anchor[] = [\r\n    \"top-left\",\r\n    \"top-right\",\r\n    \"bottom-right\",\r\n    \"bottom-left\",\r\n];\r\n\r\n// 4x4 matrix\r\nexport type Matrix3d = [\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number,\r\n    number\r\n];\r\n\r\n// top-left, top-right, bottom-right, bottom-left\r\nexport type RectPoints = [Vector, Vector, Vector, Vector];\r\n\r\nexport type Vector = [number, number]; // [x, y]\r\n\r\nconst defaultMatrix: Matrix3d = [\r\n    1,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    1,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    1,\r\n    0,\r\n    0,\r\n    0,\r\n    0,\r\n    1, // second and third for x and y position of element\r\n];\r\n\r\nconst _setDeltaVal = () => {\r\n    let deltaInitVals: any = {};\r\n    anchors.forEach((e) => {\r\n        deltaInitVals[e] = [0, 0];\r\n    });\r\n    return deltaInitVals;\r\n};\r\n\r\nexport default class Keystoner extends React.Component<Props, State> {\r\n    container: HTMLElement | null;\r\n    layerTranslateDelta: Vector | undefined;\r\n    anchorTranslateDelta: Vector | undefined;\r\n    isAnchorDragging = false;\r\n    targetPoints: RectPoints;\r\n    anchorMoving: Anchor | undefined;\r\n    state: State = {\r\n        matrix: defaultMatrix,\r\n        translateDelta: _setDeltaVal(),\r\n        sourcePoints: undefined,\r\n        transformOrigin: [0, 0],\r\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\r\n    };\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\r\n        window.addEventListener(\"mousemove\", this.onMouseMove);\r\n        if (this.container) {\r\n            const { width, height } = this.container.getBoundingClientRect();\r\n            const sourcePoints = [\r\n                [0, 0],\r\n                [width, 0],\r\n                [width, height],\r\n                [0, height],\r\n            ] as RectPoints;\r\n            this.targetPoints = [...sourcePoints] as RectPoints;\r\n            this.setState({ sourcePoints });\r\n\r\n      if (localStorage.getItem(\"projMap\")) {\r\n                console.log(\"loading prev. projMap...\");\r\n                let ls: any = localStorage.getItem(\"projMap\");\r\n                this.setState(JSON.parse(ls));\r\n            }  \r\n\r\n\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps: any, prevState: State) {\r\n\r\n            console.log(\"saving edited projMap...\", JSON.stringify(prevState));\r\n            // save whatever keystone was in state\r\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\r\n      \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\r\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\r\n    }\r\n\r\n    onAnchorMouseDown = (evt: any, position: any) => {\r\n        evt.stopPropagation();\r\n        this.anchorTranslateDelta = [\r\n            evt.pageX - this.state.translateDelta[position][0],\r\n            evt.pageY - this.state.translateDelta[position][1],\r\n        ];\r\n\r\n        this.anchorMoving = position;\r\n    };\r\n\r\n    onAnchorMouseMove = (evt: any) => {\r\n        if (\r\n            !this.anchorTranslateDelta ||\r\n            !this.state.sourcePoints ||\r\n            !this.anchorMoving\r\n        ) {\r\n            return;\r\n        }\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\r\n\r\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\r\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\r\n\r\n        this.targetPoints[vectorIndexToModify] = [\r\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\r\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\r\n        ];\r\n\r\n        this.setState({\r\n            matrix: transformPointsToMatrix(\r\n                this.state.sourcePoints,\r\n                this.targetPoints!\r\n            ),\r\n            translateDelta: {\r\n                ...this.state.translateDelta,\r\n                [this.anchorMoving]: [deltaX, deltaY],\r\n            },\r\n        });\r\n    };\r\n\r\n    onAnchorMouseUp = (position: any) => {\r\n        this.anchorTranslateDelta = undefined;\r\n        this.anchorMoving = undefined;\r\n    };\r\n\r\n    onMouseUp = () => {\r\n        this.layerTranslateDelta = undefined;\r\n    };\r\n\r\n    onMouseMove = (evt: any) => {\r\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\r\n            return;\r\n        }\r\n\r\n        const newVector: Vector = [\r\n            evt.pageX - this.layerTranslateDelta[0],\r\n            evt.pageY - this.layerTranslateDelta[1],\r\n        ];\r\n\r\n        this.setState({\r\n            containerTranslate: newVector,\r\n        });\r\n    };\r\n\r\n    onMouseDown = (evt: any) => {\r\n        const { containerTranslate } = this.state;\r\n        this.layerTranslateDelta = [\r\n            evt.pageX - containerTranslate[0],\r\n            evt.pageY - containerTranslate[1],\r\n        ];\r\n    };\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const {\r\n            style,\r\n            isEditMode,\r\n            className,\r\n            anchorStyle,\r\n            anchorClassName,\r\n        } = this.props;\r\n        const {\r\n            translateDelta,\r\n            matrix,\r\n            containerTranslate,\r\n            transformOrigin,\r\n        } = this.state;\r\n\r\n        return (\r\n            <>\r\n              \r\n         \r\n\r\n                <div\r\n          \r\n                    onMouseDown={this.onMouseDown}\r\n                    onMouseUp={this.onMouseUp}\r\n                    style={{\r\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\r\n                        position: \"relative\",\r\n                        display: \"inline-block\",\r\n                        transform: vectorToTransform(containerTranslate),\r\n                    }}\r\n                >\r\n                    <div\r\n                        ref={(ref) => {\r\n                            this.container = ref;\r\n                        }}\r\n                        style={{\r\n                            ...styles.container,\r\n                            ...style,\r\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\r\n                            transform: matrixToTransform(matrix),\r\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\r\n                        }}\r\n                        className={className}\r\n                    >\r\n                        {this.props.children}\r\n                    </div>\r\n                    {isEditMode && (\r\n                        <div>\r\n                            {anchors.map((anchor, index) => (\r\n                                <AnchorComponent\r\n                                    style={anchorStyle}\r\n                                    className={anchorClassName}\r\n                                    key={anchor}\r\n                                    translation={translateDelta[anchor]}\r\n                                    position={anchor}\r\n                                    onMouseDown={this.onAnchorMouseDown}\r\n                                    onMouseUp={this.onAnchorMouseUp}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        position: \"fixed\",\r\n        bottom: \"1vh\",\r\n        zIndex: 1001,\r\n        maxWidth: \"50vw\",\r\n    },\r\n}));\r\n\r\nexport default function DeleteLocalStorage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" justify=\"center\">\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.button}\r\n                startIcon={<DeleteIcon />}\r\n            >\r\n                Reset Projection Mapping\r\n            </Button>\r\n        </Grid>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport PrjDeckGLMap from './PrjDeckGLMap'\r\nimport Keystoner from './Components/Keystoner'\r\nimport DeleteLocalStorage from './Components/deleteLocalStorage'\r\n\r\nexport default function Keystone() {\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  const clearLocalStraoge = () => {\r\n    if (localStorage.getItem('projMap')) {\r\n      localStorage.removeItem('projMap')\r\n    }\r\n    if (localStorage.getItem('deckGLviewState')) {\r\n      localStorage.removeItem('deckGLviewState')\r\n    }\r\n    window.location.reload()\r\n  }\r\n\r\n  useEffect(() => {\r\n    const onKeyDown = ({ key }) => {\r\n      if (key === ' ') {\r\n        setEditMode((editMode) => !editMode)\r\n        console.log(key, editMode)\r\n      }\r\n    }\r\n    document.addEventListener('keydown', onKeyDown)\r\n    return () => {\r\n      document.removeEventListener('keydown', onKeyDown)\r\n    }\r\n  }, [editMode])\r\n\r\n  return (\r\n    <>\r\n      {editMode && (\r\n        <div onClick={() => clearLocalStraoge()}>\r\n          <DeleteLocalStorage />\r\n        </div>\r\n      )}\r\n\r\n      <div\r\n        // ! this div's props are\r\n        // ! controling the projection z-index\r\n        // ! on top of the menus\r\n\r\n        style={{\r\n          height: '100%',\r\n          width: '100vw',\r\n          overflow: 'hidden',\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          zIndex: 1000,\r\n        }}\r\n      >\r\n        <div>\r\n          <Keystoner\r\n            style={{\r\n              height: '100vh',\r\n              width: '100vw',\r\n            }}\r\n            isEditMode={editMode}\r\n          >\r\n            <PrjDeckGLMap />\r\n          </Keystoner>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport settings from '../settings/settings.json'\r\nimport { Button } from '@material-ui/core/'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}))\r\nexport default function TableNameInput({ setSelectedTable }) {\r\n  const classes = useStyles()\r\n  const [tableList, setTableList] = useState()\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Gets all tables on init\r\n     */\r\n    let buttonsArr = []\r\n    const cityIOlistURL = settings.cityIO.ListOfTables\r\n    const cityIOtableBaseUrl = settings.cityIO.baseURL\r\n\r\n    axios.get(cityIOlistURL).then((res) => {\r\n      res.data.forEach((tableName) => {\r\n        const geogridUrl = `${cityIOtableBaseUrl}${tableName}/GEOGRID/`\r\n        buttonsArr.push(\r\n          <Button\r\n            key={Math.random()}\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              axios\r\n                .get(geogridUrl)\r\n                .then((res) => {\r\n                  if (res.status === 200) {\r\n                    setSelectedTable(tableName)\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err)\r\n                })\r\n            }}\r\n          >\r\n            {tableName}\r\n          </Button>,\r\n        )\r\n      })\r\n      setTableList(buttonsArr)\r\n    })\r\n  }, [setSelectedTable])\r\n\r\n  return <div className={classes.root}>{tableList}</div>\r\n}\r\n","import { useEffect } from 'react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { setUIWebsocketData, setUIWebsocketReady } from '../../../redux/actions'\r\nimport settings from '../../../settings/settings.json'\r\n\r\n/*\r\nhttps://stackoverflow.com/questions/39728000/react-native-with-websocket-doesnt-work\r\n*/\r\n\r\nconst UIWebsocket = () => {\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    var socket = new WebSocket(settings.SOCKETS.URL)\r\n\r\n    socket.onopen = () => {\r\n      socket.send('CityScopeJS')\r\n      socket.onmessage = ({ data }) => {\r\n        dispatch(setUIWebsocketReady(true))\r\n        dispatch(setUIWebsocketData(JSON.parse(data)))\r\n      }\r\n    }\r\n  }, [dispatch])\r\n  return null\r\n}\r\n\r\nexport default UIWebsocket\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport CityIO from './CityIO/'\r\nimport Keystone from './Keystone'\r\nimport { Container, Typography, makeStyles, Box } from '@material-ui/core'\r\nimport TableNameInput from '../../Components/TableNameInput'\r\nimport Page from '../../layouts/Page'\r\nimport UIWebsocket from './UIWebsocket'\r\n\r\nexport default function CityScopeJS() {\r\n  // wait for 'ready' flag from cityIO when app is ready to start\r\n  const isCityIOready = useSelector((state) => state.READY)\r\n  const isSocketUIready = useSelector((state) => state.UI_WEBSOCKET_READY)\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: 'auto',\r\n        height: '100%',\r\n        paddingBottom: theme.spacing(3),\r\n        paddingTop: theme.spacing(3),\r\n      },\r\n    },\r\n  }))\r\n\r\n  const [selectedTable, setSelectedTable] = useState(null)\r\n\r\n  const ListOfTables = () => {\r\n    return (\r\n      <Container maxWidth=\"md\">\r\n        <Typography color=\"textPrimary\" variant=\"h1\">\r\n          Projection tool\r\n        </Typography>\r\n        <Box mt={'3em'} />\r\n        <Typography color=\"textPrimary\">\r\n          This tool is used to project and display CityScopeJS tables in passive\r\n          mode, such as projectors, TVs, or other non-interactive displays.\r\n        </Typography>\r\n        <Box mt={'2em'} />\r\n        <Typography color=\"textPrimary\" variant=\"caption\">\r\n          start by selecting your CityScopeJS project. Press 'Spacebar' to\r\n          toggle keystone. Note: Not all CityScope projects below are ready for\r\n          CityScopeJS.\r\n        </Typography>\r\n        <Box mt={'2em'} />\r\n        <TableNameInput setSelectedTable={setSelectedTable} />\r\n      </Container>\r\n    )\r\n  }\r\n\r\n  const classes = useStyles()\r\n  return (\r\n    <>\r\n      <UIWebsocket />\r\n      <Page className={classes.root} title=\"Keystone\">\r\n        {!isCityIOready && <ListOfTables />}\r\n        {selectedTable && <CityIO tableName={selectedTable} />}\r\n\r\n        {isCityIOready && isSocketUIready && <Keystone />}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { List, ListItem, Divider, Container, Box } from \"@material-ui/core\";\r\nimport Radar from \"./Radar\";\r\nimport BarChart from \"./BarChart\";\r\nimport AreaCalc from \"./AreaCalc\";\r\n\r\nfunction VisContainer(props) {\r\n    console.log('vào viscontainer111');\r\n    return (\r\n        <>\r\n            {props.cityIOdata && (\r\n                <Container>\r\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                        <AreaCalc cityioData={props.cityIOdata} />\r\n                        <Radar cityioData={props.cityIOdata} />\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                        <BarChart cityioData={props.cityIOdata} />\r\n                    </Box>\r\n                </Container>\r\n                // <List>\r\n                //     <ListItem style={{justifyContent: \"center\"}}>\r\n                //         <AreaCalc cityioData={props.cityIOdata} />\r\n                //     </ListItem>\r\n\r\n                //     <Divider />\r\n\r\n                //     <ListItem style={{justifyContent: \"center\"}}>\r\n                //         <Radar cityioData={props.cityIOdata} />\r\n                //     </ListItem>\r\n\r\n                //     <Divider />\r\n\r\n                //     <ListItem style={{justifyContent: \"center\"}}>\r\n                //         <BarChart cityioData={props.cityIOdata} />\r\n                //     </ListItem>\r\n                // </List>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default VisContainer;\r\n","import MenuContainer from './MenuContainer'\r\nimport MapContainer from './DeckglMap'\r\nimport LoadingSpinner from './CityIO/LoadingSpinner'\r\nimport VisContainer from './VisContainer/index_custom'\r\nimport {\r\n  makeStyles,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n} from '@material-ui/core'\r\nimport Page from '../../layouts/Page'\r\n\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport settings from \"../../settings/settings.json\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { listenToMenuUI } from \"../../redux/actions\";\r\nimport ChooseScenario from \"./MenuContainer/ChooseScenario\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 'auto',\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nconst getAPICall = async (URL) => {\r\n  try {\r\n    const response = await axios.get(URL);\r\n    return response.data;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport default function CSjsMainCustom(props) {\r\n  const classes = useStyles()\r\n  const tableName = props.tableName\r\n  const cityIOdata = props.cityIOdata\r\n  const onlyMap = props.onlyMap\r\n  const onlyOptionMenu = props.onlyOptionMenu\r\n  const onlyChartSidebar = props.onlyChartSidebar\r\n  const mapAndChartSidebar = props.mapAndChartSidebar\r\n\r\n  const menuState = useSelector((state) => state.MENU);\r\n  const loadedModules = Object.keys(cityIOdata);\r\n  const togglesMeta = settings.menu.toggles;\r\n\r\n  const dispatch = useDispatch();\r\n  let myMenuState = [...menuState];\r\n  const [chosenScenario, setChosenScenario] = useState(\"hcm_test_v1\");\r\n  let myChosenScenario = 'hcm_test_v1';\r\n\r\n  /* Listening View Option Change */\r\n  useEffect(() => {\r\n    const timer = setTimeout(listenChangingOption, 1000);\r\n    return () => clearTimeout(timer);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  async function listenChangingOption() {\r\n    // recursively get hashes\r\n    const options = await getAPICall(`${process.env.REACT_APP_EXPRESS_PUBLIC_URL}/get-option`);\r\n    const scenarioObject = await getAPICall(`${process.env.REACT_APP_EXPRESS_PUBLIC_URL}/get-scenario`);\r\n    if (options) {\r\n      console.log(options);\r\n      let table = options.table;\r\n      let option = options.option;\r\n      let mode = options.mode;\r\n      if (table == tableName) {\r\n        if (option) {\r\n          let requireModule = togglesMeta[option].requireModule;\r\n          if (loadedModules.includes(requireModule) || requireModule === false) {\r\n            const i = myMenuState.indexOf(option);\r\n            if (mode == \"ON\") {\r\n              if (i === -1) {\r\n                myMenuState.push(option);\r\n              }\r\n            }\r\n            else {\r\n              if (i !== -1) {\r\n                myMenuState.splice(i, 1);\r\n              }\r\n            }\r\n            dispatch(listenToMenuUI(myMenuState));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (scenarioObject) {\r\n      console.log(scenarioObject);\r\n      let scenario = scenarioObject.scenario;\r\n      if (scenario && scenario != myChosenScenario) {\r\n        console.log(111);\r\n        myChosenScenario = scenario;\r\n        setChosenScenario(scenario);\r\n      }\r\n    }\r\n    setTimeout(listenChangingOption, 1000);\r\n  }\r\n\r\n  /* END Listening */\r\n\r\n  return (\r\n    <Page className={classes.root} title=\"CitySCopeJS\">\r\n      <LoadingSpinner />\r\n      <Container maxWidth={null}>\r\n        <Grid container spacing={5}>\r\n          {onlyOptionMenu && <Grid item xs={12} l={12} md={12} xl={12} container>\r\n            <Grid item container direction=\"column\" spacing={2}>\r\n              <Grid item xs={12} l={12} md={12} xl={12}>\r\n                <Card\r\n                  elevation={15}\r\n                  style={{\r\n                    maxHeight: '90vh',\r\n                    overflow: 'auto',\r\n                  }}\r\n                >\r\n                  <CardContent>\r\n                    <MenuContainer tableName={tableName} />\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>}\r\n\r\n          {onlyMap && <Grid item xs={12} l={12} md={12} xl={12}>\r\n            <Card\r\n              elevation={15}\r\n              style={{\r\n                height: '90vh',\r\n                width: '100%',\r\n                position: 'relative',\r\n              }}\r\n            >\r\n              {/* <Test/> */}\r\n              <MapContainer onlyMap={true} />\r\n            </Card>\r\n          </Grid>}\r\n          {mapAndChartSidebar && <Grid item xs={6} l={6} md={6} xl={6}>\r\n            <Card\r\n              elevation={15}\r\n              style={{\r\n                maxHeight: '100%',\r\n                overflow: 'hidden',\r\n              }}\r\n            >\r\n              <VisContainer cityIOdata={cityIOdata} />\r\n            </Card>\r\n          </Grid>}\r\n          {mapAndChartSidebar && <Grid item xs={6} l={6} md={6} xl={6}>\r\n            <Card\r\n              elevation={15}\r\n              style={{\r\n                height: '90vh',\r\n                width: '100%',\r\n                overflow: 'hidden',\r\n                position: 'relative',\r\n              }}\r\n            >\r\n              {/* <Test/> */}\r\n              {/* <iframe title=\"cityScience\" allowfullscreen=\"true\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" src=\"https://www.arcgis.com/apps/CEWebViewer/viewer.html?&3dWebScene=31d84c469a404bcbb13797d501286217&view=686441.41,11.16,-1189886.87,686778.3,2828.18,-1185381.71,0.95&lyr=1,1,1,1&wkid=32648&v=2\"></iframe> */}\r\n              <MapContainer pitchMap={30} zoomMap={14} autoRotate={true}/>\r\n            </Card>\r\n          </Grid>}\r\n          {/* {onlyChartSidebar && <Grid item xs={12} l={12} md={12} xl={12}>\r\n            <Card\r\n              elevation={15}\r\n              style={{\r\n                maxHeight: '90vh',\r\n                overflow: 'auto',\r\n              }}\r\n            >\r\n              <VisContainer cityIOdata={cityIOdata} />\r\n            </Card>\r\n          </Grid>} */}\r\n          <Grid>\r\n            <ChooseScenario chosenScenario={chosenScenario} />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Page>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport CityIO from './CityIO/cityIO'\r\nimport CityIOviewer from '../CityIOviewer'\r\nimport LoadingSpinner from './CityIO/LoadingSpinner'\r\n// import CSjsMain from './CSjsMain'\r\nimport CSjsMainCustom from './CSjsMainCustom'\r\n\r\nexport default function CityScopeJSMapCenter() {\r\n  // get the table name for cityIO comp\r\n  const [tableName, setTableName] = useState()\r\n  const [isDone, setIsdone] = useState(false)\r\n  // on init, get the adress URL\r\n  // to search for  a table\r\n  useEffect(() => {\r\n    let url = window.location.toString()\r\n    let pre = 'cityscope='\r\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length).toLowerCase()\r\n\r\n    \r\n    // check URL for proper CS project link\r\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\r\n      setTableName(cityscopePrjName)\r\n    } else {\r\n      /** if failed to get table name from\r\n       * url location, resote to the\r\n       * CityIO viewer\r\n       *\r\n       */\r\n      setIsdone(true)\r\n    }\r\n  }, [])\r\n\r\n  // wait for 'ready' flag from cityIO when app is ready to start\r\n  const isReady = useSelector((state) => state.READY)\r\n  const cityIOdata = useSelector((state) => state.CITYIO)\r\n\r\n  return (\r\n    <>\r\n      {tableName && <CityIO tableName={tableName} />}\r\n      {isReady && <CSjsMainCustom cityIOdata={cityIOdata} tableName={tableName} onlyMap={true} />}\r\n      {isDone && <CityIOviewer />}\r\n      <LoadingSpinner />\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport CityIO from './CityIO/cityIO'\r\nimport CityIOviewer from '../CityIOviewer'\r\nimport LoadingSpinner from './CityIO/LoadingSpinner'\r\nimport CSjsMain from './CSjsMain'\r\nimport CSjsMainCustom from './CSjsMainCustom'\r\nimport MapContainer from './DeckglMap'\r\nimport {\r\n  makeStyles,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n} from '@material-ui/core'\r\n\r\n\r\nexport default function CityScopeJSChartSidebar() {\r\n  // get the table name for cityIO comp\r\n  const [tableName, setTableName] = useState()\r\n  const [isDone, setIsdone] = useState(false)\r\n  // on init, get the adress URL\r\n  // to search for  a table\r\n  useEffect(() => {\r\n    let url = window.location.toString()\r\n    console.log(url);\r\n    let pre = 'cityscope='\r\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length).toLowerCase()\r\n\r\n\r\n    // check URL for proper CS project link\r\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\r\n      setTableName(cityscopePrjName)\r\n    } else {\r\n      /** if failed to get table name from\r\n       * url location, resote to the\r\n       * CityIO viewer\r\n       *\r\n       */\r\n      setIsdone(true)\r\n    }\r\n  }, [])\r\n\r\n  // wait for 'ready' flag from cityIO when app is ready to start\r\n  const isReady = useSelector((state) => state.READY)\r\n  const cityIOdata = useSelector((state) => state.CITYIO)\r\n\r\n  return (\r\n    <>\r\n      {tableName && <CityIO tableName={tableName} />}\r\n      {isReady && <CSjsMainCustom cityIOdata={cityIOdata} tableName={tableName} mapAndChartSidebar={true} />}\r\n      {isDone && <CityIOviewer />}\r\n      <LoadingSpinner />\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport CityIO from './CityIO/cityIO'\r\nimport CityIOviewer from '../CityIOviewer'\r\nimport LoadingSpinner from './CityIO/LoadingSpinner'\r\nimport CSjsMain from './CSjsMain'\r\nimport CSjsMainCustom from './CSjsMainCustom'\r\n\r\nexport default function CityScopeJSOptionsMenu() {\r\n  // get the table name for cityIO comp\r\n  const [tableName, setTableName] = useState()\r\n  const [isDone, setIsdone] = useState(false)\r\n  // on init, get the adress URL\r\n  // to search for  a table\r\n  useEffect(() => {\r\n    let url = window.location.toString()\r\n    let pre = 'cityscope='\r\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length).toLowerCase()\r\n\r\n    \r\n    // check URL for proper CS project link\r\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\r\n      setTableName(cityscopePrjName)\r\n    } else {\r\n      /** if failed to get table name from\r\n       * url location, resote to the\r\n       * CityIO viewer\r\n       *\r\n       */\r\n      setIsdone(true)\r\n    }\r\n  }, [])\r\n\r\n  // wait for 'ready' flag from cityIO when app is ready to start\r\n  const isReady = useSelector((state) => state.READY)\r\n  const cityIOdata = useSelector((state) => state.CITYIO)\r\n\r\n  return (\r\n    <>\r\n      {tableName && <CityIO tableName={tableName} />}\r\n      {isReady && <CSjsMainCustom cityIOdata={cityIOdata} tableName={tableName} onlyOptionMenu={true}/>}\r\n      {isDone && <CityIOviewer />}\r\n      <LoadingSpinner />\r\n    </>\r\n  )\r\n}\r\n","import { Navigate } from 'react-router-dom'\r\nimport MainLayout from './layouts/MainLayout'\r\nimport NotFoundView from './views/Errors/NotFoundView'\r\nimport GridEditor from './views/GridEditor'\r\nimport CityScopeJS from './views/CityScopeJS'\r\nimport ProjectionMapping from './views/ProjectionMapping'\r\nimport CityScopeJSMapCenter from './views/CityScopeJS/indexMapCenter'\r\nimport CityScopeJSChartSidebar from './views/CityScopeJS/indexChartSidebar'\r\nimport CityScopeJSOptionsMenu from './views/CityScopeJS/indexOptionsMenu'\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    element: <MainLayout />,\r\n    children: [\r\n      { path: '/', element: <CityScopeJS /> },\r\n      { path: '/onlyMap', element: <CityScopeJSMapCenter /> },\r\n      { path: '/onlyChartSidebar', element: <CityScopeJSChartSidebar /> },\r\n      { path: '/onlyOptionsMenu', element: <CityScopeJSOptionsMenu /> },\r\n      { path: '/editor/', element: <GridEditor /> },\r\n      { path: '/projection', element: <ProjectionMapping /> },\r\n      { path: '/cityioviewer', element: <Navigate to=\"/\" /> },\r\n\r\n      { path: '*', element: <Navigate to=\"/404\" /> },\r\n      { path: '404', element: <NotFoundView /> },\r\n    ],\r\n  },\r\n  // { path: '/onlyMap', element: <CityScopeJSMapCenter /> },\r\n]\r\n\r\nexport default routes\r\n","import React from \"react\";\r\nimport { useRoutes } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport GlobalStyles from \"./theme/GlobalStyles\";\r\nimport theme from \"./theme\";\r\nimport routes from \"./routes\";\r\n\r\nconst App = () => {\r\n    const routing = useRoutes(routes);\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <GlobalStyles />\r\n            {routing}\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst ProviderWrapper = ({ children, store }) => (\r\n    <Provider store={store}>{children}</Provider>\r\n);\r\n\r\nexport default ProviderWrapper;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter, BrowserRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport Provider from \"./redux/Provider\";\r\nimport store from \"./redux/store\";\r\n// console.log(require('./Express/index'));\r\n\r\n// console.log(require('express'));\r\n\r\n// ! basename={process.env.PUBLIC_URL}\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        {/* https://github.com/facebook/create-react-app/issues/1765 */}\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}